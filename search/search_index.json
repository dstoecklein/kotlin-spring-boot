{"config":{"indexing":"full","lang":["de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Spring Bean \u00b6 A Spring Bean is simply a Java object. When Java objects are created by the Spring Container, then Spring refers to them as \"Spring Beans\".Spring Beans are created from normal Java classes .... just like Java objects. In summary, whenever you see \"Spring Bean\", just think Java object. Spring Container (Application Context) \u00b6 Create and manage objects (Inversion of control) Tell Object Factory to give me a \"Coach\" object Spring creates objects based on configurations Automate object creation Inject objects dependencies (Dependency injection) Configure Beans via XML (legacy) Java Annotations (modern) Java Source Code (modern) Spring Development Process \u00b6 Configure Spring Beans Create a Spring Container Retrieve Beans from Spring Container Example \u00b6 Bean configuration via XML, applicationContext.xml <beans> <bean id= \"myCoach\" class= \"com.dstoecklein.springdemo.BaseballCoach\" ></bean> </beans> Creating a Spring Container ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext ( \"applicationContext.xml\" ); Retrieve Beans from Container Coach theCoach = context . getBean ( \"myCoach\" , Coach . class ); Dependency Injection \u00b6 A car object has multiple dependencies such as engine etc. A car factory (Spring object factory) assembles the car with its dependencies A dependency is like a helper object Injection types Constructor injection Setter injection Auto-Wiring via annotations Constructor injection \u00b6 Define the dependency interface and class Create a constructor in your class for injections Configure the dependency injection in Spring config file Define the dependency interface and class public interface FortuneService { public String getFortune (); } public class HappyFortuneService implements FortuneService { public String getFortune () { return \"Today is your lucky day!\" ; } } Create a constructor in your class for injections. A constructor that accepts dependencies. public class BaseballCoach implements Coach { private FortuneService fortuneService ; public BaseballCoach ( FortuneService theFortuneService ) { fortuneService = theFortuneService ; } } Configure the dependency injection in Spring config file <bean id= \"myFortuneService\" class= \"com.dstoecklein.springdemo.HappyFortuneService\" > </bean> <bean id= \"myCoach\" class= \"com.dstoecklein.springdemo.BaseballCoach\" > <constructor-arg ref= \"myFortuneService\" /> </bean> What's happening behind the scenes \u00b6 Spring will create objects for all beans HappyFortuneService myFortuneService = new HappyFortuneService(); BaseballCoach myCoach = new BaseballCoach(myFortuneService); Setter injection \u00b6 Create setter methods for dependency injection Configure the dependency injection in Spring config file Create setter methods for dependency injection public class CricketCoach implements Coach { private FortuneService fortuneService ; public CricketCoach () { } // this method will be called by Spring for injection public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } } Configure the dependency injection in Spring config file <bean id= \"myFortuneService\" class= \"com.dstoecklein.springdemo.HappyFortuneService\" ></bean> <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- Spring will look for setFortuneService. We must define method name without \"set\" and with lower case --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> </bean> Literal injection \u00b6 Create setter methods for dependency injection Configure the dependency injection in Spring config file Create setter methods for dependency injection public class CricketCoach implements Coach { private FortuneService fortuneService ; private String emailAddress ; private String team ; // create a no-arg constructor public CricketCoach () { } // create setter methods public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } public void setEmailAddress ( String emailAddress ) { this . emailAddress = emailAddress ; } public void setTeam ( String team ) { this . team = team ; } } Configure the dependency injection in Spring config file <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- set up setter injection --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> <property name= \"emailAddress\" value= \"example@team.com\" /> <property name= \"team\" value= \"ExampleTeam\" /> </bean> Inject values from Properties file \u00b6 Problem with literal injection is that values were hardcoded. We want to read these values from a properties file. Create Properties file Load Properties file into Spring config file Reference values from Properties file Create Properties file foo.email=example@team.com foo.team=exampleTeam Load Properties file into Spring config file <context:property-placeholder location= \"classpath:sport.properties\" /> Reference values from Properties file <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- set up setter injection --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> <property name= \"emailAddress\" value= \"${foo.email}\" /> <property name= \"team\" value= \"${foo.team}\" /> </bean> Scopes \u00b6 Refers to a lifecycle of a bean How long does the bean live How many instances are created How is the bean shared Default scope is singleton Meaning the Spring container only creates 1 instances of a bean These will reference the same bean: Coach theCoach = context . getBean ( \"myCoach\" , Coach . class ); Coach anotherCoach = context . getBean ( \"myCoach\" , Coach . class ); Another scopes are: * prototype : Creates new bean instance for each container request. Like the new keyword. * request : Scopes to an HTTP web request * session : Scoped to an HTTP web session * global-session : Scoped to a global HTTP web session Bean lifecycle \u00b6 Container started -> bean instantiated -> dependency injected -> internal Spring processing -> Your custom init method (optional) <bean id= \"myCoach\" class= \"...\" init-method= \"doMyStartupStuff\" ></bean> <bean id= \"myCoach\" class= \"...\" destroy-method= \"doMyCleanupStuff\" ></bean> Define your methods for init and destroy Configure the method names in Spring config file","title":"Introduction"},{"location":"index.html#spring-bean","text":"A Spring Bean is simply a Java object. When Java objects are created by the Spring Container, then Spring refers to them as \"Spring Beans\".Spring Beans are created from normal Java classes .... just like Java objects. In summary, whenever you see \"Spring Bean\", just think Java object.","title":"Spring Bean"},{"location":"index.html#spring-container-application-context","text":"Create and manage objects (Inversion of control) Tell Object Factory to give me a \"Coach\" object Spring creates objects based on configurations Automate object creation Inject objects dependencies (Dependency injection) Configure Beans via XML (legacy) Java Annotations (modern) Java Source Code (modern)","title":"Spring Container (Application Context)"},{"location":"index.html#spring-development-process","text":"Configure Spring Beans Create a Spring Container Retrieve Beans from Spring Container","title":"Spring Development Process"},{"location":"index.html#example","text":"Bean configuration via XML, applicationContext.xml <beans> <bean id= \"myCoach\" class= \"com.dstoecklein.springdemo.BaseballCoach\" ></bean> </beans> Creating a Spring Container ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext ( \"applicationContext.xml\" ); Retrieve Beans from Container Coach theCoach = context . getBean ( \"myCoach\" , Coach . class );","title":"Example"},{"location":"index.html#dependency-injection","text":"A car object has multiple dependencies such as engine etc. A car factory (Spring object factory) assembles the car with its dependencies A dependency is like a helper object Injection types Constructor injection Setter injection Auto-Wiring via annotations","title":"Dependency Injection"},{"location":"index.html#constructor-injection","text":"Define the dependency interface and class Create a constructor in your class for injections Configure the dependency injection in Spring config file Define the dependency interface and class public interface FortuneService { public String getFortune (); } public class HappyFortuneService implements FortuneService { public String getFortune () { return \"Today is your lucky day!\" ; } } Create a constructor in your class for injections. A constructor that accepts dependencies. public class BaseballCoach implements Coach { private FortuneService fortuneService ; public BaseballCoach ( FortuneService theFortuneService ) { fortuneService = theFortuneService ; } } Configure the dependency injection in Spring config file <bean id= \"myFortuneService\" class= \"com.dstoecklein.springdemo.HappyFortuneService\" > </bean> <bean id= \"myCoach\" class= \"com.dstoecklein.springdemo.BaseballCoach\" > <constructor-arg ref= \"myFortuneService\" /> </bean>","title":"Constructor injection"},{"location":"index.html#whats-happening-behind-the-scenes","text":"Spring will create objects for all beans HappyFortuneService myFortuneService = new HappyFortuneService(); BaseballCoach myCoach = new BaseballCoach(myFortuneService);","title":"What's happening behind the scenes"},{"location":"index.html#setter-injection","text":"Create setter methods for dependency injection Configure the dependency injection in Spring config file Create setter methods for dependency injection public class CricketCoach implements Coach { private FortuneService fortuneService ; public CricketCoach () { } // this method will be called by Spring for injection public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } } Configure the dependency injection in Spring config file <bean id= \"myFortuneService\" class= \"com.dstoecklein.springdemo.HappyFortuneService\" ></bean> <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- Spring will look for setFortuneService. We must define method name without \"set\" and with lower case --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> </bean>","title":"Setter injection"},{"location":"index.html#literal-injection","text":"Create setter methods for dependency injection Configure the dependency injection in Spring config file Create setter methods for dependency injection public class CricketCoach implements Coach { private FortuneService fortuneService ; private String emailAddress ; private String team ; // create a no-arg constructor public CricketCoach () { } // create setter methods public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } public void setEmailAddress ( String emailAddress ) { this . emailAddress = emailAddress ; } public void setTeam ( String team ) { this . team = team ; } } Configure the dependency injection in Spring config file <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- set up setter injection --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> <property name= \"emailAddress\" value= \"example@team.com\" /> <property name= \"team\" value= \"ExampleTeam\" /> </bean>","title":"Literal injection"},{"location":"index.html#inject-values-from-properties-file","text":"Problem with literal injection is that values were hardcoded. We want to read these values from a properties file. Create Properties file Load Properties file into Spring config file Reference values from Properties file Create Properties file foo.email=example@team.com foo.team=exampleTeam Load Properties file into Spring config file <context:property-placeholder location= \"classpath:sport.properties\" /> Reference values from Properties file <bean id= \"myCricketCoach\" class= \"com.dstoecklein.springdemo.CricketCoach\" > <!-- set up setter injection --> <property name= \"fortuneService\" ref= \"myFortuneService\" /> <property name= \"emailAddress\" value= \"${foo.email}\" /> <property name= \"team\" value= \"${foo.team}\" /> </bean>","title":"Inject values from Properties file"},{"location":"index.html#scopes","text":"Refers to a lifecycle of a bean How long does the bean live How many instances are created How is the bean shared Default scope is singleton Meaning the Spring container only creates 1 instances of a bean These will reference the same bean: Coach theCoach = context . getBean ( \"myCoach\" , Coach . class ); Coach anotherCoach = context . getBean ( \"myCoach\" , Coach . class ); Another scopes are: * prototype : Creates new bean instance for each container request. Like the new keyword. * request : Scopes to an HTTP web request * session : Scoped to an HTTP web session * global-session : Scoped to a global HTTP web session","title":"Scopes"},{"location":"index.html#bean-lifecycle","text":"Container started -> bean instantiated -> dependency injected -> internal Spring processing -> Your custom init method (optional) <bean id= \"myCoach\" class= \"...\" init-method= \"doMyStartupStuff\" ></bean> <bean id= \"myCoach\" class= \"...\" destroy-method= \"doMyCleanupStuff\" ></bean> Define your methods for init and destroy Configure the method names in Spring config file","title":"Bean lifecycle"},{"location":"annotations.html","text":"What are Java Annotations? \u00b6 Labels that provide meta-data about the class Boot (Class): Color (label) @Override telling the compiler that we want to override that method. At compile time, the compiler will verify the override. Spring Configuration with Annotations \u00b6 XML can be very verbose Configure beans with Annotations Spring will scan your Java classes for annotations Automatically register the beans in the Spring container (no more XML needed). Development Process \u00b6 Enable component scanning in Spring config file Add the @Component Annotation to class Retrieve the bean from Spring container Enable component scanning in Spring config file <beans ... > <context:component-scan base-package= \"com.dstoecklein.springdemo\" /> </beans> Add the @Component Annotation to class. Will register bean. thatSillyCoach is the bean id. @Component ( \"thatSillyCoach\" ) public class TennisCoach implements Coach { @Override public String getDailyWorkout () { return \"TennisCoach\" ; } } Retrieve the bean from Spring container Coach theCoach = context . getBean ( \"thatSillyCoach\" , Coach . class ); Constructor Injection \u00b6 Now we are using @Autowiring For dependency injection, Spring can autowire these dependencies Spring will look for a class that matches the property (by class or interface) 3 types Constructor injection Setter injection Field injection Autowiring example \u00b6 Injecting FortuneService into a Coach implementation Spring will scan @Components Did anyone implement FortuneService interface??? Define the dependency interface and class Create a constructor in your class for injections Configure the dependency injection with @Autowired Define the dependency interface and class public interface FortuneService { public String getFortune (); } @Component public class HappyFortuneService implements FortuneService { public String getFortune () { return \"Today is your lucky day!\" ; } } Create a constructor in your class for injections Configure the dependency injection with @Autowired @Component public class TennisCoach implements Coach { private FortuneService fortuneService ; @Autowired public TennisCoach ( FortuneService theFortuneService ) { fortuneService = theFortuneService ; } } Spring will find a bean that implements FortuneService , here its HappyFortuneService . So we get the Coach object and its FortuneService wired up together. Setter injection \u00b6 Inject dependencies by calling setter methods Create setter methods in your class Configure the dependency injection with @Autowired Create setter methods in your class Configure the dependency injection with @Autowired public class TennisCoach implements Coach { private FortuneService fortuneService ; public TennisCoach () {} @Autowired public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } } Field injection \u00b6 Inject dependencies by setting the field values on your class directly Accomplished by using Java reflection Configure the dependency using @Autowired Applied directly on fields No setters required public class TennisCoach implements Coach { @Autowired private FortuneService fortuneService ; public TennisCoach () {} } Which injection type to use? \u00b6 Choose a style and keep consistent. Annotation Autowiring and Qualifiers \u00b6 But which implementation to choose if multiple interface implementations exist? NoUniqueBeanDefinitionException Add beanId to @Qualifier @Component public class TennisCoach implements Coach { @Autowired @Qualifier ( \"happyFortuneService\" ) private FortuneService fortuneService ; } Bean Scopes with Annotations \u00b6 We have already used scopes with XML declarations We can do it using @Scope(\"singleton\") or @Scope(\"prototype\") in the Java class that implements interface. Bean lifecycle methods / hooks \u00b6 Remember, we can add custom code during bean initialization and bean destruction . We can do it using @PostConstruct or @PreDestroy . @Component public class TennisCoach implements Coach { @PostConstruct public void doMyStartupStuff () { ... } @PreDestroy public void doMyCleanupStuff () { ... } } Configure a Spring container using Java instead of XML \u00b6 There are 3 ways of configuring a Spring container 1. Full XML config 2. XML Component Scan (making the XML a little smaller) 3. Java Configuration Class with @Configuration Step by Step: 1. Create a Java class with @Configuration 2. Add component scan (optional) 3. Read Spring Java config class 4. Retrieve bean from Spring container Create a Java class with @Configuration @Configuration public class SprotConfig { } Add component scan (optional) @Configuration @ComponentScan ( \"com.dstoecklein.springdemo\" ) public class SprotConfig { } Read Spring Java config class AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext ( SportConfig . class ); Retrieve bean from Spring container Coach theCoach = context . getBean ( \"tennisCoach\" , Coach . class ); Defining Beans using Java instead of XML \u00b6 public class SwimCoach implements Coach { } Step by Step: 1. Define method to expose the bean 2. Injection bean dependencies 3. Read Spring Java config class 4. Retrieve bean from Spring container Define method to expose the bean. Create new instance of SwimCoach inside our Config. The method name swimCoach will be the beanId . No component Scan required. @Configuration public class SportConfig { @Bean public Coach swimCoach () { SwimCoach mySwimCoach = new SwimCoach (); return mySwimCoach ; } } Injection bean dependencies. We know our Coach need Fortune dependency. So how do we pull that in? We define a bean for FortuneService that returns a new instance of happyFortuneService . Again, the method name will be the beanId . Next we inject that dependency to mySwimCoach . @Configuration public class SportConfig { @Bean public FortuneService happyFortuneService () { return new HappyFortuneService (); } @Bean public Coach swimCoach () { SwimCoach mySwimCoach = new SwimCoach ( happyFortuneService ()); return mySwimCoach ; } } Read Spring Java config class AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext ( SportConfig . class ); Retrieve bean from Spring container Coach theCoach = context . getBean ( \"swimCoach\" , Coach . class ); Inject values from properties file \u00b6 Step by Step: 1. Create properties file 2. Load properties file in Spring config 3. Reference values from properties file Create properties file foo.email=example@team.com foo.team=exampleTeam Load properties file in Spring config @Configuration @PropertySource ( \"classpath:sport.properties\" ) public class SportConfig { ... } Reference values from properties file public class SwimCoach implements Coach { @Value ( \"${foo.email}\" ) private String email ; @Value ( \"${foo.team}\" ) private String team ; }","title":"Annotations"},{"location":"annotations.html#what-are-java-annotations","text":"Labels that provide meta-data about the class Boot (Class): Color (label) @Override telling the compiler that we want to override that method. At compile time, the compiler will verify the override.","title":"What are Java Annotations?"},{"location":"annotations.html#spring-configuration-with-annotations","text":"XML can be very verbose Configure beans with Annotations Spring will scan your Java classes for annotations Automatically register the beans in the Spring container (no more XML needed).","title":"Spring Configuration with Annotations"},{"location":"annotations.html#development-process","text":"Enable component scanning in Spring config file Add the @Component Annotation to class Retrieve the bean from Spring container Enable component scanning in Spring config file <beans ... > <context:component-scan base-package= \"com.dstoecklein.springdemo\" /> </beans> Add the @Component Annotation to class. Will register bean. thatSillyCoach is the bean id. @Component ( \"thatSillyCoach\" ) public class TennisCoach implements Coach { @Override public String getDailyWorkout () { return \"TennisCoach\" ; } } Retrieve the bean from Spring container Coach theCoach = context . getBean ( \"thatSillyCoach\" , Coach . class );","title":"Development Process"},{"location":"annotations.html#constructor-injection","text":"Now we are using @Autowiring For dependency injection, Spring can autowire these dependencies Spring will look for a class that matches the property (by class or interface) 3 types Constructor injection Setter injection Field injection","title":"Constructor Injection"},{"location":"annotations.html#autowiring-example","text":"Injecting FortuneService into a Coach implementation Spring will scan @Components Did anyone implement FortuneService interface??? Define the dependency interface and class Create a constructor in your class for injections Configure the dependency injection with @Autowired Define the dependency interface and class public interface FortuneService { public String getFortune (); } @Component public class HappyFortuneService implements FortuneService { public String getFortune () { return \"Today is your lucky day!\" ; } } Create a constructor in your class for injections Configure the dependency injection with @Autowired @Component public class TennisCoach implements Coach { private FortuneService fortuneService ; @Autowired public TennisCoach ( FortuneService theFortuneService ) { fortuneService = theFortuneService ; } } Spring will find a bean that implements FortuneService , here its HappyFortuneService . So we get the Coach object and its FortuneService wired up together.","title":"Autowiring example"},{"location":"annotations.html#setter-injection","text":"Inject dependencies by calling setter methods Create setter methods in your class Configure the dependency injection with @Autowired Create setter methods in your class Configure the dependency injection with @Autowired public class TennisCoach implements Coach { private FortuneService fortuneService ; public TennisCoach () {} @Autowired public void setFortuneService ( FortuneService fortuneService ) { this . fortuneService = fortuneService ; } }","title":"Setter injection"},{"location":"annotations.html#field-injection","text":"Inject dependencies by setting the field values on your class directly Accomplished by using Java reflection Configure the dependency using @Autowired Applied directly on fields No setters required public class TennisCoach implements Coach { @Autowired private FortuneService fortuneService ; public TennisCoach () {} }","title":"Field injection"},{"location":"annotations.html#which-injection-type-to-use","text":"Choose a style and keep consistent.","title":"Which injection type to use?"},{"location":"annotations.html#annotation-autowiring-and-qualifiers","text":"But which implementation to choose if multiple interface implementations exist? NoUniqueBeanDefinitionException Add beanId to @Qualifier @Component public class TennisCoach implements Coach { @Autowired @Qualifier ( \"happyFortuneService\" ) private FortuneService fortuneService ; }","title":"Annotation Autowiring and Qualifiers"},{"location":"annotations.html#bean-scopes-with-annotations","text":"We have already used scopes with XML declarations We can do it using @Scope(\"singleton\") or @Scope(\"prototype\") in the Java class that implements interface.","title":"Bean Scopes with Annotations"},{"location":"annotations.html#bean-lifecycle-methods-hooks","text":"Remember, we can add custom code during bean initialization and bean destruction . We can do it using @PostConstruct or @PreDestroy . @Component public class TennisCoach implements Coach { @PostConstruct public void doMyStartupStuff () { ... } @PreDestroy public void doMyCleanupStuff () { ... } }","title":"Bean lifecycle methods / hooks"},{"location":"annotations.html#configure-a-spring-container-using-java-instead-of-xml","text":"There are 3 ways of configuring a Spring container 1. Full XML config 2. XML Component Scan (making the XML a little smaller) 3. Java Configuration Class with @Configuration Step by Step: 1. Create a Java class with @Configuration 2. Add component scan (optional) 3. Read Spring Java config class 4. Retrieve bean from Spring container Create a Java class with @Configuration @Configuration public class SprotConfig { } Add component scan (optional) @Configuration @ComponentScan ( \"com.dstoecklein.springdemo\" ) public class SprotConfig { } Read Spring Java config class AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext ( SportConfig . class ); Retrieve bean from Spring container Coach theCoach = context . getBean ( \"tennisCoach\" , Coach . class );","title":"Configure a Spring container using Java instead of XML"},{"location":"annotations.html#defining-beans-using-java-instead-of-xml","text":"public class SwimCoach implements Coach { } Step by Step: 1. Define method to expose the bean 2. Injection bean dependencies 3. Read Spring Java config class 4. Retrieve bean from Spring container Define method to expose the bean. Create new instance of SwimCoach inside our Config. The method name swimCoach will be the beanId . No component Scan required. @Configuration public class SportConfig { @Bean public Coach swimCoach () { SwimCoach mySwimCoach = new SwimCoach (); return mySwimCoach ; } } Injection bean dependencies. We know our Coach need Fortune dependency. So how do we pull that in? We define a bean for FortuneService that returns a new instance of happyFortuneService . Again, the method name will be the beanId . Next we inject that dependency to mySwimCoach . @Configuration public class SportConfig { @Bean public FortuneService happyFortuneService () { return new HappyFortuneService (); } @Bean public Coach swimCoach () { SwimCoach mySwimCoach = new SwimCoach ( happyFortuneService ()); return mySwimCoach ; } } Read Spring Java config class AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext ( SportConfig . class ); Retrieve bean from Spring container Coach theCoach = context . getBean ( \"swimCoach\" , Coach . class );","title":"Defining Beans using Java instead of XML"},{"location":"annotations.html#inject-values-from-properties-file","text":"Step by Step: 1. Create properties file 2. Load properties file in Spring config 3. Reference values from properties file Create properties file foo.email=example@team.com foo.team=exampleTeam Load properties file in Spring config @Configuration @PropertySource ( \"classpath:sport.properties\" ) public class SportConfig { ... } Reference values from properties file public class SwimCoach implements Coach { @Value ( \"${foo.email}\" ) private String email ; @Value ( \"${foo.team}\" ) private String team ; }","title":"Inject values from properties file"},{"location":"aop.html","text":"Aspect Oriented Programming (AOP) \u00b6 This is basic hibernate code as we did before to save an entity: @Override public void addAccount ( Account theAccount , String userId ) { Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } Now we have some new requirements from the boss, to add some logging. Need to log our DAO method @Override public void addAccount ( Account theAccount , String userId ) { // add logging (println, log4j, etc.) Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } New requirement comes in: Need to add security to our DAO before running the method @Override public void addAccount ( Account theAccount , String userId ) { // add logging (println, log4j, etc.) // add security check Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } New requirement comes in: Let's add this to Controller, Service also ... New requirement comes in: Add this to our entire system ... Problem statement \u00b6 Code Tangling : We have logging and security code tangled in that specific business method, which is not good Code Scattering : We have to update all classes if changes to logging logic is required Possible Solution \u00b6 Inheritance? (no) We still would need to go through all our classes and put \"extends\" in What if they already extend from another class -> no multiple inheritance allowed in Java Delegation? (no) Same as above - need to touch all classes Aspect-Oriented Programming (yes) An Aspect encapsulates Cross-Cutting Concerns An Aspect can be reused at multiple locations, and it's basically just a class AOP Solution \u00b6 Apply the Proxy design pattern The Main App simply going to make a method-call, it has no idea about ``AOP Proxy Everything happens behind the scene (like a spy) Benefits \u00b6 Code for Aspect is defined in a single class Business code is cleaner Configurable (Can apply to different parts of app, no need to change main) Disadvantages \u00b6 Too many Aspects make app flow hard to follow Minor performance cost AOP Use Cases \u00b6 Logging, Security, Transaction Exception Handling API Management ... AOP Terminology \u00b6 Aspect : Module of code for cross-cutting-concerns (logging, security, ...) Advice : What action is taken and when should be applied Join Point : When to apply code during program execution Pointcut : A predicate expression for where advice should be applied Advice Types \u00b6 Before advice : Run before the method After finally advice : Run after the method After returning advice : Run after the method (on success) After throwing advice : Run after the method (on exception) Around advice : Run before and after method Weaving \u00b6 Connecting aspects to target objects to create an advised object Compile-time, load-time, run-time (slowest) weaving AOP Frameworks \u00b6 Spring AOP (easier to use, lightweight) Only method-level join points Uses proxy pattern Security, Transactions, Caching Uses run-time weaving of aspects AspectJ (better for complex requirements) Support all join points Complete support for AOP Compile-time, post-compile, load-time weaving","title":"Aspect Oriented Programming (AOP)"},{"location":"aop.html#aspect-oriented-programming-aop","text":"This is basic hibernate code as we did before to save an entity: @Override public void addAccount ( Account theAccount , String userId ) { Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } Now we have some new requirements from the boss, to add some logging. Need to log our DAO method @Override public void addAccount ( Account theAccount , String userId ) { // add logging (println, log4j, etc.) Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } New requirement comes in: Need to add security to our DAO before running the method @Override public void addAccount ( Account theAccount , String userId ) { // add logging (println, log4j, etc.) // add security check Session session = sessionFactory . getCurrentSession (); session . save ( theAccount ); } New requirement comes in: Let's add this to Controller, Service also ... New requirement comes in: Add this to our entire system ...","title":"Aspect Oriented Programming (AOP)"},{"location":"aop.html#problem-statement","text":"Code Tangling : We have logging and security code tangled in that specific business method, which is not good Code Scattering : We have to update all classes if changes to logging logic is required","title":"Problem statement"},{"location":"aop.html#possible-solution","text":"Inheritance? (no) We still would need to go through all our classes and put \"extends\" in What if they already extend from another class -> no multiple inheritance allowed in Java Delegation? (no) Same as above - need to touch all classes Aspect-Oriented Programming (yes) An Aspect encapsulates Cross-Cutting Concerns An Aspect can be reused at multiple locations, and it's basically just a class","title":"Possible Solution"},{"location":"aop.html#aop-solution","text":"Apply the Proxy design pattern The Main App simply going to make a method-call, it has no idea about ``AOP Proxy Everything happens behind the scene (like a spy)","title":"AOP Solution"},{"location":"aop.html#aop-terminology","text":"Aspect : Module of code for cross-cutting-concerns (logging, security, ...) Advice : What action is taken and when should be applied Join Point : When to apply code during program execution Pointcut : A predicate expression for where advice should be applied","title":"AOP Terminology"},{"location":"hibernate.html","text":"Hibernate \u00b6 A framework for persisting or saving Java objects in a database You Java app -> Hibernate -> Database Handles all of the low level SQL code Minimizes JDBC code you have to develop and provides ORM ORM \u00b6 Developer defines mapping between Java class and database table // create object Student theStudent = new Student ( \"John\" , \"Doe\" ); // save it to DB and returns ID int theId = ( Integer ) session . save ( theStudent ); // retrieve from DB Student myStudent = session . get ( Student . class , theId ); // query objects Query query = session . createQuery ( \"from student\" ); // Hibernate Query Language List < Student > students = query . list (); Hibernate & JDBC Relationship \u00b6 Hibernate uses JDBC for all Database communications (its just another layer of abstraction) Hibernate Development process \u00b6 Add Hibernate config file Annotate Java Class Develop Java code to perform DB operations Add Hibernate config file. It tells Hibernate how to connect to the DB <hibernate-configuration> <session-factory> <!-- JDBC Database connection settings --> <property name= \"connection.driver_class\" > com.mysql.cj.jdbc.Driver </property> <property name= \"connection.url\" > jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false &amp; serverTimezone=UTC </property> <property name= \"connection.username\" > hbstudent </property> <property name= \"connection.password\" > hbstudent </property> <!-- JDBC connection pool settings ... using built-in test pool --> <property name= \"connection.pool_size\" > 1 </property> <!-- Select our SQL dialect --> <property name= \"dialect\" > org.hibernate.dialect.MySQLDialect </property> <!-- Echo the SQL to stdout --> <property name= \"show_sql\" > true </property> <!-- Set the current session context --> <property name= \"current_session_context_class\" > thread </property> </session-factory> </hibernate-configuration> Annotate Java Class. Entity Class = Java class that is mapped to DB table 1. XML config (legacy) 2. Java Annotations (prefered) @Entity @Table ( name = \"student\" ) public class Student { @Id // PK @GeneratedValue ( strategy = GenerationType . IDENTITY ) // PK if you wanna be explicit @GeneratedValue ( strategy = GenerationType . AUTO ) @GeneratedValue ( strategy = GenerationType . SEQUENCE ) @GeneratedValue ( strategy = GenerationType . TABLE ) @Column ( name = \"id\" ) private int id ; @Column ( name = \"first_name\" ) private String firstName ; } Develop Java code to perform DB operations SessionFactory : Reads the hibernate config file, creates session objects, only create once in your app Session : Wraps a JDBC connection, Main object to save/retrieve objects, retrieved from SessionFactory, short-lived object (use it and then throw it away) SessionFactory = factory = new Configuration () . configure ( \"hibernate.cfg.xm\" ) . addAnnotatedClass ( Student . class ) . buildSessionFactory (); Session session = factory . getCurrentSession (); try { // create student object Student tempStudent = new Student (); // start transaction (hibernate knows how to map this object based on our annotion) session . beginTransaction (); // save the student session . save ( tempStudent ); // commit the transaction session . getTransaction (). commit (); } finally { factory . close (); } Retrieve an object \u00b6 In hibernate we retrieve objects by its ID (Primary Key) Student myStudent = session . get ( Student . class , theStudent . getId ()); Querying Objects \u00b6 Using HQL, similar to SQL // use the Java class name here List < Student > theStudents = session . createQuery ( \"from Student\" ). getResultList (); List < Student > theStudents = session . createQuery ( \"from Student s where s.lastName='Doe'\" ). getResultList (); Updating Objects \u00b6 int studentId = 1 ; Student myStudent = session . get ( Student . class , studentId ); myStudent . setFirstName ( \"Scooby\" ); session . getTransaction (). commit (); For multiple updates: session . createQuery ( \"update Student set email='foo@gmail.com'\" ). executeUpdate (); Deleting Objects \u00b6 int studentId = 1 ; Student myStudent = session . get ( Student . class , studentId ); session . delete ( myStudent ); session . getTransaction (). commit (); For multiple deletions: session . createQuery ( \"delete from Student where id=2\" ). executeUpdate (); Advanced Mappings \u00b6 1:n, n:m, etc. PK and FK CASCADE, ... 1:1 mapping \u00b6 Create InstructorDetail table @Entity @Table ( name = \"instructor_detail\" ) public class InstructorDetail { @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) @Column ( name = \"id\" ) private int id ; ... } Create Instructor table and map to InstructorDetail @Entity @Table ( name = \"instructor\" ) public class Instructor { @Id @GeneratedValue ( strategy = GenerationType . IDENTITY ) @Column ( name = \"id\" ) private int id ; @OneToOne ( cascade = CascadeType . ALL ) @JoinColumn ( name = \"instructor_detail_id\" ) private InstructorDetail instructorDetail ; ... } Create Main App public static void main ( String [] args ) { Instructor tempInstructor = new Instructor ( \"Max\" , \"Musterman\" , \"maxmuster@gmail.com\" ); InstructorDetail tempInstructorDetail = new InstructorDetail ( \"http://www.example.com\" , \"Heyya!\" ); tempInstructor . setInstructorDetail ( tempInstructorDetail ); session . beginTransaction (); session . save ( tempInstructor ); session . getTransaction (). commit (); } 1:1 Bi-Directional \u00b6 If we load an InstructorDetail, we want to get the associated Instructor Cant do this with our uni-directional setup Changes to InstructorDetail @Entity @Table ( name = \"instructor_detail\" ) public class InstructorDetail { @OneToOne ( mappedBy = \"instructorDetail\" , cascade = CascadeType . ALL ) // refers to the instructorDetail property in Instructor.class private Instructor instructor ; public Instructor getInstructor () { return instructor ; } public void setInstructor ( Instructor instructor ) { this . instructor = instructor ; } } Create Main App public static void main ( String [] args ) { int theId = 1 ; InstructorDetail = temp = session . get ( InstructorDetail . class , theId ); Sysout ( temp . getInstructor ()); } STOPED AT LECTURE 23, VIDEO 12 \u00b6","title":"Hibernate"},{"location":"hibernate.html#hibernate","text":"A framework for persisting or saving Java objects in a database You Java app -> Hibernate -> Database Handles all of the low level SQL code Minimizes JDBC code you have to develop and provides ORM","title":"Hibernate"},{"location":"hibernate.html#orm","text":"Developer defines mapping between Java class and database table // create object Student theStudent = new Student ( \"John\" , \"Doe\" ); // save it to DB and returns ID int theId = ( Integer ) session . save ( theStudent ); // retrieve from DB Student myStudent = session . get ( Student . class , theId ); // query objects Query query = session . createQuery ( \"from student\" ); // Hibernate Query Language List < Student > students = query . list ();","title":"ORM"},{"location":"hibernate.html#hibernate-jdbc-relationship","text":"Hibernate uses JDBC for all Database communications (its just another layer of abstraction)","title":"Hibernate &amp; JDBC Relationship"},{"location":"hibernate.html#hibernate-development-process","text":"Add Hibernate config file Annotate Java Class Develop Java code to perform DB operations Add Hibernate config file. It tells Hibernate how to connect to the DB <hibernate-configuration> <session-factory> <!-- JDBC Database connection settings --> <property name= \"connection.driver_class\" > com.mysql.cj.jdbc.Driver </property> <property name= \"connection.url\" > jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false &amp; serverTimezone=UTC </property> <property name= \"connection.username\" > hbstudent </property> <property name= \"connection.password\" > hbstudent </property> <!-- JDBC connection pool settings ... using built-in test pool --> <property name= \"connection.pool_size\" > 1 </property> <!-- Select our SQL dialect --> <property name= \"dialect\" > org.hibernate.dialect.MySQLDialect </property> <!-- Echo the SQL to stdout --> <property name= \"show_sql\" > true </property> <!-- Set the current session context --> <property name= \"current_session_context_class\" > thread </property> </session-factory> </hibernate-configuration> Annotate Java Class. Entity Class = Java class that is mapped to DB table 1. XML config (legacy) 2. Java Annotations (prefered) @Entity @Table ( name = \"student\" ) public class Student { @Id // PK @GeneratedValue ( strategy = GenerationType . IDENTITY ) // PK if you wanna be explicit @GeneratedValue ( strategy = GenerationType . AUTO ) @GeneratedValue ( strategy = GenerationType . SEQUENCE ) @GeneratedValue ( strategy = GenerationType . TABLE ) @Column ( name = \"id\" ) private int id ; @Column ( name = \"first_name\" ) private String firstName ; } Develop Java code to perform DB operations SessionFactory : Reads the hibernate config file, creates session objects, only create once in your app Session : Wraps a JDBC connection, Main object to save/retrieve objects, retrieved from SessionFactory, short-lived object (use it and then throw it away) SessionFactory = factory = new Configuration () . configure ( \"hibernate.cfg.xm\" ) . addAnnotatedClass ( Student . class ) . buildSessionFactory (); Session session = factory . getCurrentSession (); try { // create student object Student tempStudent = new Student (); // start transaction (hibernate knows how to map this object based on our annotion) session . beginTransaction (); // save the student session . save ( tempStudent ); // commit the transaction session . getTransaction (). commit (); } finally { factory . close (); }","title":"Hibernate Development process"},{"location":"hibernate.html#retrieve-an-object","text":"In hibernate we retrieve objects by its ID (Primary Key) Student myStudent = session . get ( Student . class , theStudent . getId ());","title":"Retrieve an object"},{"location":"hibernate.html#updating-objects","text":"int studentId = 1 ; Student myStudent = session . get ( Student . class , studentId ); myStudent . setFirstName ( \"Scooby\" ); session . getTransaction (). commit (); For multiple updates: session . createQuery ( \"update Student set email='foo@gmail.com'\" ). executeUpdate ();","title":"Updating Objects"},{"location":"hibernate.html#deleting-objects","text":"int studentId = 1 ; Student myStudent = session . get ( Student . class , studentId ); session . delete ( myStudent ); session . getTransaction (). commit (); For multiple deletions: session . createQuery ( \"delete from Student where id=2\" ). executeUpdate ();","title":"Deleting Objects"},{"location":"hibernate.html#advanced-mappings","text":"1:n, n:m, etc. PK and FK CASCADE, ...","title":"Advanced Mappings"},{"location":"hibernate.html#stoped-at-lecture-23-video-12","text":"","title":"STOPED AT LECTURE 23, VIDEO 12"},{"location":"hibernate_mvc_project.html","text":"Hibernate & MVC Project \u00b6 Build a CRM System Development Process \u00b6 Create tables (see SQL scripts) Add JDBC Driver for MySQL (to WEB-INF/lib/mysql-connector.jar ) Copy over web.xml and spring-mvc-crud-demo-servlet.xml as starter files Sanity test to make sure we can connect to DB Big Picture \u00b6 Our DAO will make use of the Hibernate API for accessing data and sending it back to the controller This DAO object will have methods for saveCustomer() getCustomer() updateCustomer() deleteCustomer() Listing customers \u00b6 Create Customer.java entity class Create CustomerDAO.java + CustomerDAOImpl.java Create CustomerController.java Create JSP page list-customer.jsp Create Customer.java entity class \u00b6 @Entity @Table ( name = \"customer\" ) public class Customer { @Id @Column ( name = \"id\" ) private int id ; @Column ( name = \"firstName\" ) private String firstName ; ... Remember: How will Hibernate or Spring know about our entity classes? spring-mvc-crud-demo-servlet.xml <bean id= \"sessionFactory\" class= \"org.springframework.orm.hibernate5.LocalSessionFactoryBean\" > <property name= \"dataSource\" ref= \"myDataSource\" /> <property name= \"packagesToScan\" value= \"com.dstoecklein.springdemo.entity\" /> ... Create CustomerDAO.java + CustomerDAOImpl.java \u00b6 For Hibernate our DAO needs a SessionFactory Factory needs a data source (how connect to DB etc.) All of these are dependencies, so we can use dependency injection here spring-mvc-crud-demo-servlet.xml <bean id= \"myDataSource\" class= \"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method= \"close\" > <property name= \"driverClass\" value= \"com.mysql.cj.jdbc.Driver\" /> <property name= \"jdbcUrl\" value= \"jdbc:mysql://localhost:3306/web_customer_tracker?useSSL=false&amp;serverTimezone=UTC\" /> <property name= \"user\" value= \"hbstudent\" /> <property name= \"password\" value= \"hbstudent\" /> ... <bean id= \"sessionFactory\" class= \"org.springframework.orm.hibernate5.LocalSessionFactoryBean\" > <property name= \"dataSource\" ref= \"myDataSource\" /> ... Define the DAO interface public interface CustomerDAO { public List < Customer > getCustomers (); } Define DAO implementation public class CustomerDAOImp implements CustomerDAO { @Autowired private SessionFactory sessionFactory ; public List < Customer > getCustomers () { ... } } Spring provides this special annotation @Transactional to automatically begin and end a transaction for your hibernate code No need for stuff like session.beginTransaction() or session.getTransaction().commit(); public class CustomerDAOImp implements CustomerDAO { @Autowired private SessionFactory sessionFactory ; @Transactional public List < Customer > getCustomers () { Session currentSession = sessionFactory . getCurrentSession (); Query < Custoer > theQuery = currentSession . createQuery ( \"from Customer\" , Customer . class ); List < Customer > customers = theQuery . getResultList (); return customers ; } } Spring has another special annotation @Repository for DAOs Place at the Top of the DAO implementation Spring will automatically register the DAO implementation Spring will provide translation of any JDBC related exceptions @Repository public class CustomerDAOImpl implements CustomerDAO { @Autowired private SessionFactory sessionFactory ; @Transactional public List < Customer > getCustomers () { Session currentSession = sessionFactory . getCurrentSession (); Query < Custoer > theQuery = currentSession . createQuery ( \"from Customer\" , Customer . class ); return theQuery . getResultList (); } } Create CustomerController.java \u00b6 Inject DAO into controller Remember: Spring gonna scan for components that implements the CustomerDAO interface @Controller @RequestMapping ( \"/customer\" ) public class CustomerController { // inject customer DAO @Autowired private CustomerDAO customerDAO ; @RequestMapping ( \"/list\" ) public String listCustomers ( Model theModel ) { // get customer from DAO List < Customer > theCustomers = customerDAO . getCustomers (); // add customers to the mode theModel . addAttribute ( \"customers\" , theCustomers ); return \"list-customers\" ; } } Create JSP page list-customer.jsp \u00b6 ... Adding CSS \u00b6 <!-- Add support for reading web resources: css, images, js, etc ... --> <mvc:resources location= \"/resources/\" mapping= \"/resources/**\" /> Add Welcome File \u00b6 Configured in web.xml @GetMapping & @PostMapping \u00b6 On HTML Form we add something like < form action = \"\" processForm \" method = \"GET\" ... > What we did so far is to use @RequestMapping() which actually handles ALL HTTP methods (GET, POST, PUT, ...) @RequestMapping ( \"/processForm\" ) public String processForm (...) { ... } We can constraint the mapping by using @RequestMapping ( \"/processForm\" , method = RequestMethod . GET ) public String processForm (...) { ... } With @GetMapping & @PostMapping we can shortcut the above mapping @GetMapping ( \"/processForm\" ) public String processForm (...) { ... } When to use what \u00b6 GET : Good for debugging, limitations on data length, can bookmark the URL POST : no limitations on data length, can send bindary data, cant bookmark the URL @Service Annotation \u00b6 Refactor: Add a service layer which sits between our controller and DAO The purpose: Implementation of Service Facade design pattern, able to integrate data from multiple sources @Service also inherits from @Component Its applied to the Service implementation Development process \u00b6 Define Service interface Define Service implementation Inject DAO Define Service interface public interface CustomerService { public List < Customer > getCustomers (); } Define Service implementation @Service public class CustomerServiceImpl implements CustomerService { @Autowired private CustomerDAO customerDAO ; @Transactional public List < Customer > getCustomers () { ... } } We also move the @Transactional part to our service, because our Service define the begin and end of a given transaction. @Repository public class CustomerDAOImpl implements CustomerDAO { // inject dependency @Autowired private SessionFactory sessionFactory ; @Override public List < Customer > getCustomers () { // get current hibernate session Session currentSession = sessionFactory . getCurrentSession (); // create query Query < Customer > theQuery = currentSession . createQuery ( \"from Customer\" , Customer . class ); return theQuery . getResultList (); } } Modification to Controller to use customerService instead of DAO. @Controller @RequestMapping ( \"/customer\" ) public class CustomerController { @Autowired private CustomerService customerService ; @GetMapping ( \"/list\" ) public String listCustomers ( Model theModel ) { // get customer from DAO List < Customer > theCustomers = customerService . getCustomers (); // add customers to the model theModel . addAttribute ( \"customers\" , theCustomers ); return \"list-customers\" ; } } Add a Customer \u00b6 Update list-customer.jsp Create HTML for new customer Process Form data: Controller -> Service -> DAO Update list-customer.jsp <!-- new button: Add customer --> < input type = \"button\" value = \"Add Customer\" onclick = \"window.location.href='showFormForAdd'\" ; return false ; class = \"add-button\" /> Create HTML for new customer CustomerController.java @GetMapping ( \"/showFormForAdd\" ) public String showFormForAdd ( Model theModel ) { Customer theCustomer = new Customer (); theModel . addAttribute ( \"customer\" , theCustomer ); return \"customer-form\" ; } customer-form.jsp < %@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %> < html > < head > < title > Save Customer </ title > < link type = \"text/css\" rel = \"stylesheet\" href = \"${pageContext.request.contextPath}/resources/css/style.css\" /> < link type = \"text/css\" rel = \"stylesheet\" href = \"${pageContext.request.contextPath}/resources/css/add-customer-style.css\" /> </ head > < body > < div id = \"wrapper\" > < div id = \"header\" > < h2 > CRM - Customer Relationship Manager </ h2 > </ div > </ div > < div id = \"container\" > < h3 > Save Customer </ h3 > < form:form action = \"saveCustomer\" modelAttribute = \"customer\" method = \"post\" > < table > < tbody > < tr > < td >< label > First name: </ label ></ td > < td >< form:input path = \"firstName\" /></ td > < td >< label > Last name: </ label ></ td > < td >< form:input path = \"lastName\" /></ td > < td >< label > Email: </ label ></ td > < td >< form:input path = \"email\" /></ td > < td >< label ></ label ></ td > < td >< input type = \"submit\" value = \"Save\" class = \"save\" /></ td > </ tr > </ tbody > </ table > </ form:form > < div style = \"clear: both\" ></ div > < p > < a href = \"${pageContext.request.contextPath}/customer/list\" > Back to List </ a > </ p > </ div > </ body > </ html > Process Form data: Controller -> Service -> DAO CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); } CustomerServiceImpl.java @Override @Transactional public void saveCustomer ( Customer theCustomer ) { customerDAO . saveCustomer ( theCustomer ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); } CustomerDAOImpl.java @Override public void saveCustomer ( Customer theCustomer ) { Session currentSession = sessionFactory . getCurrentSession (); currentSession . save ( theCustomer ); } CustomerController.java @PostMapping ( \"/saveCustomer\" ) public String saveCustomer ( @ModelAttribute ( \"customer\" ) Customer theCustomer ) { customerService . saveCustomer ( theCustomer ); return \"redirect:/customer/list\" ; } Sort Customer by last name \u00b6 CustomerDAOImpl.java Query < Customer > theQuery = currentSession . createQuery ( \"from Customer order by lastName\" , Customer . class ); Update Customer \u00b6 customer-form.jsp * Update so that it handles params customerId : * http://localhost:8080/web-customer-tracker/customer/showFormUpdate?customerId=1 ... < th > Action </ th > ... <!-- loop over and print our customers --> < c:forEach var = \"tempCustomer\" items = \"${customers}\" > <!-- construct update link with customer id --> < c:url var = \"updateLink\" value = \"/customer/showFormForUpdate\" > < :c:param name = \"customerId\" value = \"${tempCustomer.id}\" /> </ c:url > < tr > < td > ${tempCustomer.firstName} </ td > < td > ${tempCustomer.lastName} </ td > < td > ${tempCustomer.email} </ td > < td > < a href = \"${updateLink}\" > Update </ a > </ td > </ tr > </ c:forEach > ... CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); } CustomerServiceImpl.java @Override @Transactional public Customer getCustomer ( int theId ) { return customerDAO . getCustomer ( theId ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); } CustomerDAOImpl.java @Override public Customer getCustomer ( int theId ) { Session currentSession = sessionFactory . getCurrentSession (); Customer theCustomer = currentSession . get ( Customer . class , theId ); return theCustomer ; } CustomerController.java @GetMapping ( \"/showFormForUpdate\" ) public String showFormForUpdate ( @RequestParam ( \"customerId\" ) int theId , Model theModel ) { Customer theCustomer = customerService . getCustomer ( theId ); theModel . addAttribute ( \"customer\" , theCustomer ); return \"customer-form\" ; } Save customer to DB \u00b6 customer-form.jsp * When form is loaded, Spring will do customer.get(id) and place it in hidden form field * Then when we do a submit, Spring will submit this data by saying customer.set(id) * So backend knows on which customer to perform the update on * Very important line <!-- need to associate this data with customer id --> < form:hidden path = \"id\" /> Use UPSERT in DAO implementation instead of save CustomerDAOImpl.java currentSession . saveOrUpdate ( theCustomer ); Delete Customer \u00b6 list-customer.html ... < c:url var = \"deleteLink\" value = \"/customer/delete\" > < :c:param name = \"customerId\" value = \"${tempCustomer.id}\" /> </ c:url > ... < a href = \"${updateLink}\" > Update </ a > | < a href = \"${deleteLink}\" onclick = \"if (!(confirm('Are you sure you want to delete this customer?'))) return false\" > Delete </ a > ... CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); public void deleteCustomer ( int theId ); } CustomerServiceImpl.java @Override @Transactional public void deleteCustomer ( int theId ) { customerDAO . deleteCustomer ( theId ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); public void deleteCustomer ( int theId ); } CustomerDAOImpl.java @Override public void deleteCustomer ( int theId ) { Session currentSession = sessionFactory . getCurrentSession (); Query theQuery = currentSession . createQuery ( \"delete from Customer where id=:customerId\" ); theQuery . setParameter ( \"customerId\" , theId ); theQuery . executeUpdate (); } CustomerController.java @GetMapping ( \"/delete\" ) public String deleteCustomer ( @RequestParam ( \"customerId\" ) int theId , Model theModel ) { customerService . deleteCustomer ( theId ); return \"redirect:/customer/list\" ; }","title":"Hibernate & MVC Project"},{"location":"hibernate_mvc_project.html#hibernate-mvc-project","text":"Build a CRM System","title":"Hibernate &amp; MVC Project"},{"location":"hibernate_mvc_project.html#development-process","text":"Create tables (see SQL scripts) Add JDBC Driver for MySQL (to WEB-INF/lib/mysql-connector.jar ) Copy over web.xml and spring-mvc-crud-demo-servlet.xml as starter files Sanity test to make sure we can connect to DB","title":"Development Process"},{"location":"hibernate_mvc_project.html#big-picture","text":"Our DAO will make use of the Hibernate API for accessing data and sending it back to the controller This DAO object will have methods for saveCustomer() getCustomer() updateCustomer() deleteCustomer()","title":"Big Picture"},{"location":"hibernate_mvc_project.html#getmapping-postmapping","text":"On HTML Form we add something like < form action = \"\" processForm \" method = \"GET\" ... > What we did so far is to use @RequestMapping() which actually handles ALL HTTP methods (GET, POST, PUT, ...) @RequestMapping ( \"/processForm\" ) public String processForm (...) { ... } We can constraint the mapping by using @RequestMapping ( \"/processForm\" , method = RequestMethod . GET ) public String processForm (...) { ... } With @GetMapping & @PostMapping we can shortcut the above mapping @GetMapping ( \"/processForm\" ) public String processForm (...) { ... }","title":"@GetMapping &amp; @PostMapping"},{"location":"hibernate_mvc_project.html#service-annotation","text":"Refactor: Add a service layer which sits between our controller and DAO The purpose: Implementation of Service Facade design pattern, able to integrate data from multiple sources @Service also inherits from @Component Its applied to the Service implementation","title":"@Service Annotation"},{"location":"hibernate_mvc_project.html#add-a-customer","text":"Update list-customer.jsp Create HTML for new customer Process Form data: Controller -> Service -> DAO Update list-customer.jsp <!-- new button: Add customer --> < input type = \"button\" value = \"Add Customer\" onclick = \"window.location.href='showFormForAdd'\" ; return false ; class = \"add-button\" /> Create HTML for new customer CustomerController.java @GetMapping ( \"/showFormForAdd\" ) public String showFormForAdd ( Model theModel ) { Customer theCustomer = new Customer (); theModel . addAttribute ( \"customer\" , theCustomer ); return \"customer-form\" ; } customer-form.jsp < %@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %> < html > < head > < title > Save Customer </ title > < link type = \"text/css\" rel = \"stylesheet\" href = \"${pageContext.request.contextPath}/resources/css/style.css\" /> < link type = \"text/css\" rel = \"stylesheet\" href = \"${pageContext.request.contextPath}/resources/css/add-customer-style.css\" /> </ head > < body > < div id = \"wrapper\" > < div id = \"header\" > < h2 > CRM - Customer Relationship Manager </ h2 > </ div > </ div > < div id = \"container\" > < h3 > Save Customer </ h3 > < form:form action = \"saveCustomer\" modelAttribute = \"customer\" method = \"post\" > < table > < tbody > < tr > < td >< label > First name: </ label ></ td > < td >< form:input path = \"firstName\" /></ td > < td >< label > Last name: </ label ></ td > < td >< form:input path = \"lastName\" /></ td > < td >< label > Email: </ label ></ td > < td >< form:input path = \"email\" /></ td > < td >< label ></ label ></ td > < td >< input type = \"submit\" value = \"Save\" class = \"save\" /></ td > </ tr > </ tbody > </ table > </ form:form > < div style = \"clear: both\" ></ div > < p > < a href = \"${pageContext.request.contextPath}/customer/list\" > Back to List </ a > </ p > </ div > </ body > </ html > Process Form data: Controller -> Service -> DAO CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); } CustomerServiceImpl.java @Override @Transactional public void saveCustomer ( Customer theCustomer ) { customerDAO . saveCustomer ( theCustomer ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); } CustomerDAOImpl.java @Override public void saveCustomer ( Customer theCustomer ) { Session currentSession = sessionFactory . getCurrentSession (); currentSession . save ( theCustomer ); } CustomerController.java @PostMapping ( \"/saveCustomer\" ) public String saveCustomer ( @ModelAttribute ( \"customer\" ) Customer theCustomer ) { customerService . saveCustomer ( theCustomer ); return \"redirect:/customer/list\" ; }","title":"Add a Customer"},{"location":"hibernate_mvc_project.html#update-customer","text":"customer-form.jsp * Update so that it handles params customerId : * http://localhost:8080/web-customer-tracker/customer/showFormUpdate?customerId=1 ... < th > Action </ th > ... <!-- loop over and print our customers --> < c:forEach var = \"tempCustomer\" items = \"${customers}\" > <!-- construct update link with customer id --> < c:url var = \"updateLink\" value = \"/customer/showFormForUpdate\" > < :c:param name = \"customerId\" value = \"${tempCustomer.id}\" /> </ c:url > < tr > < td > ${tempCustomer.firstName} </ td > < td > ${tempCustomer.lastName} </ td > < td > ${tempCustomer.email} </ td > < td > < a href = \"${updateLink}\" > Update </ a > </ td > </ tr > </ c:forEach > ... CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); } CustomerServiceImpl.java @Override @Transactional public Customer getCustomer ( int theId ) { return customerDAO . getCustomer ( theId ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); } CustomerDAOImpl.java @Override public Customer getCustomer ( int theId ) { Session currentSession = sessionFactory . getCurrentSession (); Customer theCustomer = currentSession . get ( Customer . class , theId ); return theCustomer ; } CustomerController.java @GetMapping ( \"/showFormForUpdate\" ) public String showFormForUpdate ( @RequestParam ( \"customerId\" ) int theId , Model theModel ) { Customer theCustomer = customerService . getCustomer ( theId ); theModel . addAttribute ( \"customer\" , theCustomer ); return \"customer-form\" ; }","title":"Update Customer"},{"location":"hibernate_mvc_project.html#delete-customer","text":"list-customer.html ... < c:url var = \"deleteLink\" value = \"/customer/delete\" > < :c:param name = \"customerId\" value = \"${tempCustomer.id}\" /> </ c:url > ... < a href = \"${updateLink}\" > Update </ a > | < a href = \"${deleteLink}\" onclick = \"if (!(confirm('Are you sure you want to delete this customer?'))) return false\" > Delete </ a > ... CustomerService.java public interface CustomerService { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); public void deleteCustomer ( int theId ); } CustomerServiceImpl.java @Override @Transactional public void deleteCustomer ( int theId ) { customerDAO . deleteCustomer ( theId ); } CustomerDAO.java public interface CustomerDAO { public List < Customer > getCustomers (); public void saveCustomer ( Customer theCustomer ); public Customer getCustomer ( int theId ); public void deleteCustomer ( int theId ); } CustomerDAOImpl.java @Override public void deleteCustomer ( int theId ) { Session currentSession = sessionFactory . getCurrentSession (); Query theQuery = currentSession . createQuery ( \"delete from Customer where id=:customerId\" ); theQuery . setParameter ( \"customerId\" , theId ); theQuery . executeUpdate (); } CustomerController.java @GetMapping ( \"/delete\" ) public String deleteCustomer ( @RequestParam ( \"customerId\" ) int theId , Model theModel ) { customerService . deleteCustomer ( theId ); return \"redirect:/customer/list\" ; }","title":"Delete Customer"},{"location":"maven.html","text":"Maven \u00b6 Project management tool for build management and dependencies Automatically download and add .jar files to classpath For that Maven has its own Repository We give Maven a shopping list, and it \"buys\" all the dependencies Maven will read config file (shopping list) Maven will check local repo. If not local available, it will pull the dependencies from maven repo. Standard directory structure \u00b6 Key concepts \u00b6 Pom file Project Object Model file (shopping list) Located in root of project Project Coordinates to identify project Group ID : Name of company, convention is to use reverse domain: com.dstoecklein Artifact ID : Name for this project coolapp Version (optional): If project under active development: 1.0-SNAPSHOT Archetypes \u00b6 Can be used to create new Maven projects A collection of \"starter files\" for a project, like Java project, Web project etc. Common archetypes: maven-archetype-quickstart: Generate sample Maven project maven-archetype-webapp: Sample Maven webapp ... Maven private repositories \u00b6 Only available within organization, needs Maven server for example: JFrog Sonatype Apache ... Or use cloud hosted solutions packagecloud.io mymavenrepo.com ...","title":"Maven"},{"location":"maven.html#maven","text":"Project management tool for build management and dependencies Automatically download and add .jar files to classpath For that Maven has its own Repository We give Maven a shopping list, and it \"buys\" all the dependencies Maven will read config file (shopping list) Maven will check local repo. If not local available, it will pull the dependencies from maven repo.","title":"Maven"},{"location":"maven.html#standard-directory-structure","text":"","title":"Standard directory structure"},{"location":"maven.html#key-concepts","text":"Pom file Project Object Model file (shopping list) Located in root of project Project Coordinates to identify project Group ID : Name of company, convention is to use reverse domain: com.dstoecklein Artifact ID : Name for this project coolapp Version (optional): If project under active development: 1.0-SNAPSHOT","title":"Key concepts"},{"location":"maven.html#archetypes","text":"Can be used to create new Maven projects A collection of \"starter files\" for a project, like Java project, Web project etc. Common archetypes: maven-archetype-quickstart: Generate sample Maven project maven-archetype-webapp: Sample Maven webapp ...","title":"Archetypes"},{"location":"maven.html#maven-private-repositories","text":"Only available within organization, needs Maven server for example: JFrog Sonatype Apache ... Or use cloud hosted solutions packagecloud.io mymavenrepo.com ...","title":"Maven private repositories"},{"location":"mvc.html","text":"Spring MVC \u00b6 Framework for building web applications in Java. Based on Model-View-Controller design pattern Leverage features of the Core Spring Framework (Inversion of Control, Dependency Injection) Incoming request -> Front controller delegates request to controller -> create a model -> pass that model to view template (HTML page) -> show view template in browser Benefits \u00b6 Spring way of building web app UIs in Java Reusable UI components Help manage app state for requests Behind the scenes of Spring MVC \u00b6 Components: * A set of web pages (UI components) * A collection of Spring beans * Spring configuration (XML, Annotations or Java) Everything starts off with an incoming request. Front controller \u00b6 Known as DispatcherServlet Delegates request to the other objects Part of Spring Framework, already developed by Spring dev team Controller \u00b6 Handles request Store/retrieve data (db, web services) Place data in model Model \u00b6 Contains your data Place data in the model Data can be Java object / collection View template \u00b6 Displays data Most common is JSP + JSTL Other templates are: Thymeleaf, Groovy, Velocity, ... Spring MVC configuration (most complicated/important) \u00b6 Part 1 \u00b6 Add configurations to file: WEB-INF/web.xml Configure Spring MVC Dispatcher-Servlet (Remember: Its part of Spring) Set up URL mappings to Spring MVC Dispatcher-Servlet <web-app> <servlet> <servlet-name> dispatcher </servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <init-param> <param-name> contextConfigLocation </param-name> <param-value> /WEB-INF/spring-mvc-demo-servlet.xml </param-value> </init-param> <load-on-startup> 1 </load-on-startup> </servlet> <servlet-mapping> <servlet-name> dispatcher </servlet-name> <url-pattern> / </url-pattern> </servlet-mapping> </web-app> servlet-name must match in mapping: dispatcher Part \u00b6 Add configurations to file: WEB-INF/spring-mvc-demo-servlet.xml Add support for Spring component scanning Add support for conversion, formatting and validation Configure Spring MVC View Resolver <beans> <!-- Add support for Spring component scanning --> <context:component-scan base-package= \"com.dstoecklein.springdemo\" /> <!-- Add support for conversion, formatting and validation --> <mvc:annotation-driven/> <!-- Configure Spring MVC View Resolver --> <bean> class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"> <property name= \"prefix\" value= \"/WEB-INF/view\" /> <property name= \"suffix\" value= \".jsp\" /> </bean> </beans> InternalResourceViewResolver means: How are pages be rendered? For example: We returned a view name of show-student-list . Then Spring will automatically add the prefix and suffix: /WEB-INF/view/show-student-list.jsp . Our First MVC App \u00b6 Create Controller class Annotate with @Controller . It tells MVC that this class is a controller. It also inherits from @Component , this will automatically picked up by component scanning. Define Controller method In our case public String showPage() Add request mapping to controller method @RequestMapping(\"/\") . So we map the method to this root path. So when users to go on the website, they will see what we defined. It will handle all type of requests like GET or POST . Return View name return \"main-menu\" . Based on the config file, it will look under the given prefix directory and will then append the suffix . Create the View page Just any regular HTML page @Controller public class HomeController { @RequestMapping ( \"/\" ) public String showPage () { return \"main-menu\" ; } } Read Form-Data with Spring MVC \u00b6 The key here is to have one HelloWorldController with two different RequestMapping . @Controller public class HelloWorldController { @RequestMapping ( \"/showForm\" ) public String showForm () { return \"helloworld-form\" ; } @RequestMapping ( \"/processForm\" ) public String processForm () { return \"helloworld\" ; } } Step by step: 1. Create controller class 2. Show HTML form 3. Create controller method to show HTML form 4. Create View page for HTML form 5. Process HTML form 6. Create controller 7. Develop view page Adding data to the Spring model \u00b6 Model is a container for our application data Strings, objects, info from database, ... View page (JSP) can access data from the model Pass model to controller. In this example: Lets make name uppercase from input-field. @RequestMapping ( \"/processFormVersionTwo\" ) public String letsShoutDude ( HttpServletRequest request , Model model ) { String theName = request . getParameter ( \"studentName\" ); theName = theName . toUpperCase (); String result = \"Yo! \" + theName ; model . addAttribute ( \"message\" , result ); return \"helloworld\" ; } Access data from model in view page < html >< body > Hello World! ... The message: ${message} </ body ></ html > Bonus \u00b6 Bonus: Deploying your App to Tomcat as a Web Application Archive (WAR) file When you deploy your Java web apps, you can make use of a Web Application Archive (WAR) file. The Web Application Archive (WAR) file is a compressed version of your web application. It uses the zip file format but the file has the .war extension. If you are using Eclipse, then the best way to visualize it is think of your \"WebContent\" directory being compressed as a zip file with the .war extension. This includes all of your web pages, images, css etc. It also includes the WEB-INF directory which includes your classes in WEB-INF/classes and supporting JAR files in WEB-INF/lib. The WAR file format is part of the Java EE / Servlet specification. As a result, all Java EE servers support this format (ie jboss, weblogic, websphere, glassfish and tomcat). Below, I provide steps on how to create a WAR file in Eclipse. I also show how to deploy the WAR file on Tomcat. Reading HTML Form data with @RequestParam \u00b6 ... Instead of using HttpServletRequest Spring will read param from request: studentName Bind it to the variable: theName @RequestMapping ( \"/processFormVersionThree\" ) public String processFormVersionThree ( @RequestParam ( \"studentName\" ) String theName , Model model ) { theName = theName . toUpperCase (); String result = \"Yo!! \" + theName ; model . addAttribute ( \"message\" , result ); return \"helloworld\" ; } Add Controller @RequestMapping \u00b6 You can define a request mapping at the controller-level All request mappings on methods in the controller are relative: Similar to folder directory structure So it would be: /funny/showForm . Where /funny is controller mapping and /showForm method mapping. Great technique to group requests @RequestMapping ( \"/funny\" ) public class FunnyController { @RequestMapping ( \"/showForm\" ) public String showForm () { } @RequestMapping ( \"/processForm\" ) public String process ( HttpServletRequest request , Model model ) { } } Spring MVC Form Tags \u00b6 Spring MVC Form Tags are the building block for a web page Can make use of data binding Automatically setting / retrieving data from Java objects / beans Will generate HTML for you + some special features Put in JSP page To reference Form Tags make use of: <%@ taglib prefix=\"form\" uri=\"...\"%> in JSP file Examples form:form form:input form:textarea form:checkbox ... StudentController * New Student Object is passed to the Form @RequestMapping ( \"/showForm\" ) public String showForm ( Model theModel ) { theModel . addAttribute ( \"student\" , new Student ()); return \"student-form\" ; } form.jsp * When Form is loaded, Spring will call: student.getFirstName() (reference to path=\"firstName\" ) * When Form is submited, Spring will call: student.setFirstName() < form:form action = \"processForm\" modelAttribute = \"student\" > First name: < form:input path = \"firstName\" /> < br >< br > Last name: < form:input path = \"lastName\" /> < br >< br > < input type = \"submit\" value = \"Submit\" /> </ form:form > Read form in StudentController : * @ModelAttribute is bind to the above modelAttribute=\"student\" . Spring will take the model attribute and bind it to the variable theStudent . * No more request.getParamter needed. @RequestMapping ( \"/processForm\" ) public String processForm ( @ModelAttribute ( \"student\" ) Student theStudent ) { System . out . println ( \"theStudent: \" + theStudent . getLastName ()); return \"student-confirmation\" ; } student-confirmation < html > < body > The student is confirmed: ${student.firstName} ${student.lastName} </ body > </ html > Dropdown list \u00b6 < form:select path = \"country\" > < form:option value = \"Brazil\" label = \"Brazil\" /> < form:option value = \"USA\" label = \"USA\" /> </ form:select > Radio Buttons \u00b6 Java < form:radiobutton path = \"favoriteLanguage\" value = \"Java\" /> Perl < form:radiobutton path = \"favoriteLanguage\" value = \"Perl\" /> Python < form:radiobutton path = \"favoriteLanguage\" value = \"Python\" /> Check Boxes \u00b6 Linux < form:checkbox path = \"operatingSystems\" value = \"Linux\" /> Windows < form:checkbox path = \"operatingSystems\" value = \"Windows\" /> MacOS < form:checkbox path = \"operatingSystems\" value = \"MacOS\" /> Spring MVC Form Validation \u00b6 Validate the Fields in the Form (range, format, custom rule, ...) Java has standard bean validation API Spring version 4 and higher supports Bean Validation API (preferred) Examples @NotNull @Min , @Max @Size @Pattern for regex ... Setting up Environment We need an implementation of Java's standard Bean Validation API (JSR-303) Here comes Hibernate into play Has a separate project just for doing validation (Hibernate validator) Jakarte EE Community implementation of Java EE, so not maintained by Oracle Important: javax.* packages are renamed to jakarta.* Hibernate Validator 7 is based on Jakarta EE 9 Spring 5 is still bases on Java EE (javax.*) Spring 5 is not compatible with Hibernate Validator 7 (use Hibernator 6.2) If using Spring 5, use Hibernate Validator 6.2 If using Spring Jakarta EE 9, use Hibernator Validator 7 Required Fields \u00b6 E.g. last name is required Add validation rule to Customer class Display error Message on HTML form Perform validation in Controller class Update confirmation page Add validation rule to Customer class public class Customer { private String firstName ; @NotNull ( message = \"is required\" ) @Size ( min = 1 , message = \"is required\" ) // minimum of 1 char private String lastName ; } Display error Message on HTML form < form:form action = \"processForm\" modelAttribute = \"customer\" > First name: < form:input path = \"firstname\" /> Last name (*): < form:input path = \"lastName\" /> < form:errors path = \"lastName\" cssClass = \"error\" /> ... </ form:form > Perform validation in Controller class * @Valid : Perform validation rules on Customer object * BindingResult : Result of that validation will be placed in here @RequestMapping ( \"/processForm\" ) public String processForm ( @Valid @ModelAttribute ( \"customer\" ) Customer theCustomer , BindingResult theBindingResult ) { if ( theBindingResult . hasErrors ()) { return \"customer-form\" ; else { return \"customer-confirmation\" ; } } } Update confirmation page < html > < body > confirmed: ${customer.firstName} ... </ body > </ html > Spring MVC Validation for Numbers \u00b6 Steps are the same as above public class Customer { @Min ( value = 0 , message = \"must be greater than 0\" ) @Max ( value = 10 , message = \"must be less than 10\" ) private int freePasses ; ... } No modifications needed in CustomerController Spring MVC Validation with Regular Expressions \u00b6 e.g. to validate postal code. We apply a pattern. Steps are the same as above public class Customer { @Pattern ( regexp = \"^[a-zA-Z0-9]{5}\" , message = \"only 5 chars/digits\" ) private String postalCode ; ... } Make an Integer Field \"required\" \u00b6 Cant use @NotNull() with int . Instead use Wrapper class Integer @NotNull ( message = \"is required\" ) private Integer freePasses ; Also update getter/setter public Integer getFreePasses () { return freePasses ; } public void setFreePasses ( Integer freePasses ) { this . freePasses = freePasses ; } Handle String-input for Integer fields \u00b6 So we only can give digits as input Create a custom error message src/resources/messages.properties Load custom messages resource in Spring config file WebContent/WEB-INF/spring-mvc-demo-servlet.xml Create a custom error message Load custom messages resource in Spring config file <bean id= \"messageSource\" class= \"org.springframework.context.support.ResourceBundleMessageSource\" > <property name= \"basenames\" value= \"resources/messages\" /> </bean> Spring MVC Custom Validation \u00b6 Custom Business rules, e.g. Course Code must start with \"LUV\" Own Custom Annotation, e.g. @CourseCode @CourseCode ( value = \"LUV\" , message = \"must start with LUV\" ) private String courseCode ; Create custom validation rule: Create @CourseCode Annotation Create CourseCodeConstraintValidator (our own custom logic) @interface special type of interface to create a custom annotation in Java @Constraint constraint that is validated by a class with given business rules / logic @Target where can we apply this annotation? Here we can use it to a method or field @Retention how long should we retain the annotation? Here, runtime so we can inspect it at runtime src/com.dstoecklein.springdemo.mvc.validation CourseCode.java @Constraint ( validatedBy = CourseCodeConstraintValidator . class ) @Target ( { ElementType . METHOD , ElementType . FIELD } ) @Retention ( RetentionPolicy . RUNTIME ) public @interface CourseCode { // define default course code public String value () default \"LUV\" ; // define default error message public String message () default \"must start with LUV\" ; } Create CourseCodeConstraintValidator src/com.dstoecklein.springdemo.mvc.validation CourseCodeConstraintValidator.java public class CourseCodeConstraintValidator implements ConstraintValidator < CourseCode , String > { private String coursePrefix ; @Override public void initialize ( CourseCode theCourseCode ) { coursePrefix = theCourseCode . value (); // gives me value from @CourseCode(value=\"LUV\", message=\"\") } // Spring MVC will call this at runtime // ConstraintValidatorContext is a helper class to add messages later @Override public boolean isValid ( String theCode , ConstraintValidatorContext theConstraintValidatorContext ) { boolean result ; if ( theCode != null ) { // does it start with \"LUV\"? result = theCode . startsWith ( coursePrefix ); } else { // if course code is empty, return true result = true ; } return result ; } }","title":"MVC"},{"location":"mvc.html#spring-mvc","text":"Framework for building web applications in Java. Based on Model-View-Controller design pattern Leverage features of the Core Spring Framework (Inversion of Control, Dependency Injection) Incoming request -> Front controller delegates request to controller -> create a model -> pass that model to view template (HTML page) -> show view template in browser","title":"Spring MVC"},{"location":"mvc.html#benefits","text":"Spring way of building web app UIs in Java Reusable UI components Help manage app state for requests","title":"Benefits"},{"location":"mvc.html#behind-the-scenes-of-spring-mvc","text":"Components: * A set of web pages (UI components) * A collection of Spring beans * Spring configuration (XML, Annotations or Java) Everything starts off with an incoming request.","title":"Behind the scenes of Spring MVC"},{"location":"mvc.html#spring-mvc-configuration-most-complicatedimportant","text":"","title":"Spring MVC configuration (most complicated/important)"},{"location":"mvc.html#part-1","text":"Add configurations to file: WEB-INF/web.xml Configure Spring MVC Dispatcher-Servlet (Remember: Its part of Spring) Set up URL mappings to Spring MVC Dispatcher-Servlet <web-app> <servlet> <servlet-name> dispatcher </servlet-name> <servlet-class> org.springframework.web.servlet.DispatcherServlet </servlet-class> <init-param> <param-name> contextConfigLocation </param-name> <param-value> /WEB-INF/spring-mvc-demo-servlet.xml </param-value> </init-param> <load-on-startup> 1 </load-on-startup> </servlet> <servlet-mapping> <servlet-name> dispatcher </servlet-name> <url-pattern> / </url-pattern> </servlet-mapping> </web-app> servlet-name must match in mapping: dispatcher","title":"Part 1"},{"location":"mvc.html#part","text":"Add configurations to file: WEB-INF/spring-mvc-demo-servlet.xml Add support for Spring component scanning Add support for conversion, formatting and validation Configure Spring MVC View Resolver <beans> <!-- Add support for Spring component scanning --> <context:component-scan base-package= \"com.dstoecklein.springdemo\" /> <!-- Add support for conversion, formatting and validation --> <mvc:annotation-driven/> <!-- Configure Spring MVC View Resolver --> <bean> class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"> <property name= \"prefix\" value= \"/WEB-INF/view\" /> <property name= \"suffix\" value= \".jsp\" /> </bean> </beans> InternalResourceViewResolver means: How are pages be rendered? For example: We returned a view name of show-student-list . Then Spring will automatically add the prefix and suffix: /WEB-INF/view/show-student-list.jsp .","title":"Part"},{"location":"mvc.html#our-first-mvc-app","text":"Create Controller class Annotate with @Controller . It tells MVC that this class is a controller. It also inherits from @Component , this will automatically picked up by component scanning. Define Controller method In our case public String showPage() Add request mapping to controller method @RequestMapping(\"/\") . So we map the method to this root path. So when users to go on the website, they will see what we defined. It will handle all type of requests like GET or POST . Return View name return \"main-menu\" . Based on the config file, it will look under the given prefix directory and will then append the suffix . Create the View page Just any regular HTML page @Controller public class HomeController { @RequestMapping ( \"/\" ) public String showPage () { return \"main-menu\" ; } }","title":"Our First MVC App"},{"location":"mvc.html#read-form-data-with-spring-mvc","text":"The key here is to have one HelloWorldController with two different RequestMapping . @Controller public class HelloWorldController { @RequestMapping ( \"/showForm\" ) public String showForm () { return \"helloworld-form\" ; } @RequestMapping ( \"/processForm\" ) public String processForm () { return \"helloworld\" ; } } Step by step: 1. Create controller class 2. Show HTML form 3. Create controller method to show HTML form 4. Create View page for HTML form 5. Process HTML form 6. Create controller 7. Develop view page","title":"Read Form-Data with Spring MVC"},{"location":"mvc.html#adding-data-to-the-spring-model","text":"Model is a container for our application data Strings, objects, info from database, ... View page (JSP) can access data from the model Pass model to controller. In this example: Lets make name uppercase from input-field. @RequestMapping ( \"/processFormVersionTwo\" ) public String letsShoutDude ( HttpServletRequest request , Model model ) { String theName = request . getParameter ( \"studentName\" ); theName = theName . toUpperCase (); String result = \"Yo! \" + theName ; model . addAttribute ( \"message\" , result ); return \"helloworld\" ; } Access data from model in view page < html >< body > Hello World! ... The message: ${message} </ body ></ html >","title":"Adding data to the Spring model"},{"location":"mvc.html#bonus","text":"Bonus: Deploying your App to Tomcat as a Web Application Archive (WAR) file When you deploy your Java web apps, you can make use of a Web Application Archive (WAR) file. The Web Application Archive (WAR) file is a compressed version of your web application. It uses the zip file format but the file has the .war extension. If you are using Eclipse, then the best way to visualize it is think of your \"WebContent\" directory being compressed as a zip file with the .war extension. This includes all of your web pages, images, css etc. It also includes the WEB-INF directory which includes your classes in WEB-INF/classes and supporting JAR files in WEB-INF/lib. The WAR file format is part of the Java EE / Servlet specification. As a result, all Java EE servers support this format (ie jboss, weblogic, websphere, glassfish and tomcat). Below, I provide steps on how to create a WAR file in Eclipse. I also show how to deploy the WAR file on Tomcat.","title":"Bonus"},{"location":"mvc.html#reading-html-form-data-with-requestparam","text":"... Instead of using HttpServletRequest Spring will read param from request: studentName Bind it to the variable: theName @RequestMapping ( \"/processFormVersionThree\" ) public String processFormVersionThree ( @RequestParam ( \"studentName\" ) String theName , Model model ) { theName = theName . toUpperCase (); String result = \"Yo!! \" + theName ; model . addAttribute ( \"message\" , result ); return \"helloworld\" ; }","title":"Reading HTML Form data with @RequestParam"},{"location":"mvc.html#add-controller-requestmapping","text":"You can define a request mapping at the controller-level All request mappings on methods in the controller are relative: Similar to folder directory structure So it would be: /funny/showForm . Where /funny is controller mapping and /showForm method mapping. Great technique to group requests @RequestMapping ( \"/funny\" ) public class FunnyController { @RequestMapping ( \"/showForm\" ) public String showForm () { } @RequestMapping ( \"/processForm\" ) public String process ( HttpServletRequest request , Model model ) { } }","title":"Add Controller @RequestMapping"},{"location":"mvc.html#spring-mvc-form-tags","text":"Spring MVC Form Tags are the building block for a web page Can make use of data binding Automatically setting / retrieving data from Java objects / beans Will generate HTML for you + some special features Put in JSP page To reference Form Tags make use of: <%@ taglib prefix=\"form\" uri=\"...\"%> in JSP file Examples form:form form:input form:textarea form:checkbox ... StudentController * New Student Object is passed to the Form @RequestMapping ( \"/showForm\" ) public String showForm ( Model theModel ) { theModel . addAttribute ( \"student\" , new Student ()); return \"student-form\" ; } form.jsp * When Form is loaded, Spring will call: student.getFirstName() (reference to path=\"firstName\" ) * When Form is submited, Spring will call: student.setFirstName() < form:form action = \"processForm\" modelAttribute = \"student\" > First name: < form:input path = \"firstName\" /> < br >< br > Last name: < form:input path = \"lastName\" /> < br >< br > < input type = \"submit\" value = \"Submit\" /> </ form:form > Read form in StudentController : * @ModelAttribute is bind to the above modelAttribute=\"student\" . Spring will take the model attribute and bind it to the variable theStudent . * No more request.getParamter needed. @RequestMapping ( \"/processForm\" ) public String processForm ( @ModelAttribute ( \"student\" ) Student theStudent ) { System . out . println ( \"theStudent: \" + theStudent . getLastName ()); return \"student-confirmation\" ; } student-confirmation < html > < body > The student is confirmed: ${student.firstName} ${student.lastName} </ body > </ html >","title":"Spring MVC Form Tags"},{"location":"mvc.html#dropdown-list","text":"< form:select path = \"country\" > < form:option value = \"Brazil\" label = \"Brazil\" /> < form:option value = \"USA\" label = \"USA\" /> </ form:select >","title":"Dropdown list"},{"location":"mvc.html#radio-buttons","text":"Java < form:radiobutton path = \"favoriteLanguage\" value = \"Java\" /> Perl < form:radiobutton path = \"favoriteLanguage\" value = \"Perl\" /> Python < form:radiobutton path = \"favoriteLanguage\" value = \"Python\" />","title":"Radio Buttons"},{"location":"mvc.html#check-boxes","text":"Linux < form:checkbox path = \"operatingSystems\" value = \"Linux\" /> Windows < form:checkbox path = \"operatingSystems\" value = \"Windows\" /> MacOS < form:checkbox path = \"operatingSystems\" value = \"MacOS\" />","title":"Check Boxes"},{"location":"mvc.html#spring-mvc-form-validation","text":"Validate the Fields in the Form (range, format, custom rule, ...) Java has standard bean validation API Spring version 4 and higher supports Bean Validation API (preferred) Examples @NotNull @Min , @Max @Size @Pattern for regex ... Setting up Environment We need an implementation of Java's standard Bean Validation API (JSR-303) Here comes Hibernate into play Has a separate project just for doing validation (Hibernate validator) Jakarte EE Community implementation of Java EE, so not maintained by Oracle Important: javax.* packages are renamed to jakarta.* Hibernate Validator 7 is based on Jakarta EE 9 Spring 5 is still bases on Java EE (javax.*) Spring 5 is not compatible with Hibernate Validator 7 (use Hibernator 6.2) If using Spring 5, use Hibernate Validator 6.2 If using Spring Jakarta EE 9, use Hibernator Validator 7","title":"Spring MVC Form Validation"},{"location":"mvc.html#required-fields","text":"E.g. last name is required Add validation rule to Customer class Display error Message on HTML form Perform validation in Controller class Update confirmation page Add validation rule to Customer class public class Customer { private String firstName ; @NotNull ( message = \"is required\" ) @Size ( min = 1 , message = \"is required\" ) // minimum of 1 char private String lastName ; } Display error Message on HTML form < form:form action = \"processForm\" modelAttribute = \"customer\" > First name: < form:input path = \"firstname\" /> Last name (*): < form:input path = \"lastName\" /> < form:errors path = \"lastName\" cssClass = \"error\" /> ... </ form:form > Perform validation in Controller class * @Valid : Perform validation rules on Customer object * BindingResult : Result of that validation will be placed in here @RequestMapping ( \"/processForm\" ) public String processForm ( @Valid @ModelAttribute ( \"customer\" ) Customer theCustomer , BindingResult theBindingResult ) { if ( theBindingResult . hasErrors ()) { return \"customer-form\" ; else { return \"customer-confirmation\" ; } } } Update confirmation page < html > < body > confirmed: ${customer.firstName} ... </ body > </ html >","title":"Required Fields"},{"location":"mvc.html#spring-mvc-validation-for-numbers","text":"Steps are the same as above public class Customer { @Min ( value = 0 , message = \"must be greater than 0\" ) @Max ( value = 10 , message = \"must be less than 10\" ) private int freePasses ; ... } No modifications needed in CustomerController","title":"Spring MVC Validation for Numbers"},{"location":"mvc.html#spring-mvc-validation-with-regular-expressions","text":"e.g. to validate postal code. We apply a pattern. Steps are the same as above public class Customer { @Pattern ( regexp = \"^[a-zA-Z0-9]{5}\" , message = \"only 5 chars/digits\" ) private String postalCode ; ... }","title":"Spring MVC Validation with Regular Expressions"},{"location":"mvc.html#make-an-integer-field-required","text":"Cant use @NotNull() with int . Instead use Wrapper class Integer @NotNull ( message = \"is required\" ) private Integer freePasses ; Also update getter/setter public Integer getFreePasses () { return freePasses ; } public void setFreePasses ( Integer freePasses ) { this . freePasses = freePasses ; }","title":"Make an Integer Field \"required\""},{"location":"mvc.html#handle-string-input-for-integer-fields","text":"So we only can give digits as input Create a custom error message src/resources/messages.properties Load custom messages resource in Spring config file WebContent/WEB-INF/spring-mvc-demo-servlet.xml Create a custom error message Load custom messages resource in Spring config file <bean id= \"messageSource\" class= \"org.springframework.context.support.ResourceBundleMessageSource\" > <property name= \"basenames\" value= \"resources/messages\" /> </bean>","title":"Handle String-input for Integer fields"},{"location":"mvc.html#spring-mvc-custom-validation","text":"Custom Business rules, e.g. Course Code must start with \"LUV\" Own Custom Annotation, e.g. @CourseCode @CourseCode ( value = \"LUV\" , message = \"must start with LUV\" ) private String courseCode ; Create custom validation rule: Create @CourseCode Annotation Create CourseCodeConstraintValidator (our own custom logic) @interface special type of interface to create a custom annotation in Java @Constraint constraint that is validated by a class with given business rules / logic @Target where can we apply this annotation? Here we can use it to a method or field @Retention how long should we retain the annotation? Here, runtime so we can inspect it at runtime src/com.dstoecklein.springdemo.mvc.validation CourseCode.java @Constraint ( validatedBy = CourseCodeConstraintValidator . class ) @Target ( { ElementType . METHOD , ElementType . FIELD } ) @Retention ( RetentionPolicy . RUNTIME ) public @interface CourseCode { // define default course code public String value () default \"LUV\" ; // define default error message public String message () default \"must start with LUV\" ; } Create CourseCodeConstraintValidator src/com.dstoecklein.springdemo.mvc.validation CourseCodeConstraintValidator.java public class CourseCodeConstraintValidator implements ConstraintValidator < CourseCode , String > { private String coursePrefix ; @Override public void initialize ( CourseCode theCourseCode ) { coursePrefix = theCourseCode . value (); // gives me value from @CourseCode(value=\"LUV\", message=\"\") } // Spring MVC will call this at runtime // ConstraintValidatorContext is a helper class to add messages later @Override public boolean isValid ( String theCode , ConstraintValidatorContext theConstraintValidatorContext ) { boolean result ; if ( theCode != null ) { // does it start with \"LUV\"? result = theCode . startsWith ( coursePrefix ); } else { // if course code is empty, return true result = true ; } return result ; } }","title":"Spring MVC Custom Validation"},{"location":"rest.html","text":"REST \u00b6 Business Problem \u00b6 We try to build a client app that provides weather report for a city, so we need to get weather data from an external service. Questions \u00b6 How will we connect to the weather service? We make REST API calls over HTTP What Programming language we use? REST is language independent What is the data format? REST can use any data format (JSON most popular) Possible Solution \u00b6 Use API of openweathermap.org Request api.openweathermap.org/data/2.5/weather?q={city} Response { \"temp\" : 14 , \"temp_min\" : 9 , ... } Remember \u00b6 All we need to care about is that the programming language we are using can process the data format we are getting back. Dont get confused... \u00b6 REST API, RESTful API, REST Web Services, ... are all the same JSON \u00b6 Curley braces define objects Object members are name / value pairs Name is always in \"\" { \"temp\" : 14 , \"temp_min\" : 9 , \"address\" : { \"street\" : \"Lerchenstra\u00dfe\" , ... }, ... } Java JSON Data Binding \u00b6 Data binding is the process of converting JSON to Java POJO (Plain old Java Class)and vice versa. Also known as mapping / serialization, marshalling... its all the same Spring uses the Jackson Project behind the scenes Jackson handles data binding between JSON and Java POJO https://github.com/FasterXML/jackson-databind In conversion, Jackson will call appropriate getter / setters. It does NOT access private fields directly! import com.fasterxml.jackson.databind.ObjectMapper ; public class Driver { public statis void main ( String [] args ) throws Exception { ObjectMapper mapper = new ObjectMapper (); // Read data from json file, create an instance of this class and populate it Student myStudent = mapper . readValue ( new File ( \"data/sample.json\" ), Student . class ); } } Vice versa: import com.fasterxml.jackson.databind.ObjectMapper ; public class Driver { public statis void main ( String [] args ) throws Exception { ObjectMapper mapper = new ObjectMapper (); // Read data from json file, create an instance of this class and populate it Student myStudent = mapper . readValue ( new File ( \"data/sample.json\" ), Student . class ); mapper . enable ( SerializationFeature . INDENT_PUTPUT ); // just prettier writing mapper . writeValue ( new File ( \"data/output.json\" ), myStudent ); } } Spring & Jackson \u00b6 When building Spring REST apps, Spring will automatically handle Jackson integration JSON data being passed to REST controller is converted to POJO Java object being returned from REST controller is converted to JSON Ignore JSON properties that we don't want to use \u00b6 @JsonIgnoreProperties ( ignoreUnknown = true ) public class Student { ... } HTTP \u00b6 Most common use of REST is over HTTP CRUD operations POST (Create new entity) GET (Read a list of entities) PUT (Update entity) DELETE (Delete entity) What's in the messages? \u00b6 Request Message Request line: HTTP command Header variable: Request metadata Message body: contents of message as JSON Response Message Response line: Server protocol and status code (404, 500, etc) Header variable: Response metadata (if its XML or JSON, ...) Message body: contents of message MIME Content Types Message format is described by MIME content type (Multipurpose Internet Mail-Extension) Basic syntax: type/sub-type Examples: text/html or text/plain . Browser will render based on HTML tags or will just render plain text. Client-Tool Curl Postman ... Spring REST Controller \u00b6 @RestController its an extension of Controller Handles REST requests and response Will automatically convert Java POJOs to JSON as long as Jackson project is on the classpath or pom.xml @RestController @RequestMapping ( \"/test\" ) public class DemoRestController { @GetMapping ( \"/hello\" ) public String sayHello () { return \"Hello World\" ; } } Access REST endpoint at /test/hello Development Process \u00b6 Add Maven / Gradle dependency for Spring MVC and Jackson Add code for Java Config: @Configuration Add code for Java Config: Servlet Initializer Create Spring REST Service using @RestController Add Maven / Gradle dependency for Spring MVC and Jackson ... Add code for Java Config: @Configuration @Configuration @EnableWebMvc @ComponentScan ( basePackages = \"com.dstoecklein.springdemo\" ) public class DemoAppConfig { ... } Add code for Java Config: Servlet Initializer public class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletinitializer { @Override protected Class <?>[] getRootConfigClasses () { return null ; } @Override protected Class <?>[] getServletConfigClasses () { return new Class [] { DemoAppConfig . class }; } @Override protected String [] getServletMappings () { return new String [] { \"/\" }; } } Create Spring REST Service using @RestController @RestController @RequestMapping ( \"/test\" ) public class DemoRestController { @GetMapping ( \"/hello\" ) public String sayHello () { return \"Hello World\" ; } } Creating a REST Service \u00b6 We are going to create a Service for Students We will make GET Requests via Postman on this Service Will return List<Student> , need to convert to JSON with Jackson If Jackson is a dependency via Maven or Gradle, then JSON data passed to a @RestController is automatically converted to POJO POJO passed to a @RestController is automatically converted to JSON Development Process \u00b6 Create Java POJO Class for Students (we have done this earlier) Create @RestController @RestController @RequestMapping ( \"/api\" ) public class StudentRestController { @GetMapping ( \"/students\" ) public List < Student > getStudents () { List < Student > theStudents = new ArrayList <> (); // hardcoded for now thestudents . add ( new Student ( \"Max\" , \"M\u00fcller\" )); thestudents . add ( new Student ( \"Bob\" , \"Allh\" )); return theStudents ; } } Path Variables \u00b6 Retrieve a single Student by id /api/students/{studentId} , that studentId is called PathVariable Development Process \u00b6 Add request mapping to our Service Bind path variable using @PathVariable @RestController @RequestMapping ( \"/api\" ) public class StudentRestController { @GetMapping ( \"/students/{studentId}\" ) public Student getStudent ( @PathVariable int studentId ) { List < Student > theStudents = new ArrayList <> (); //populate theStudents } return theStudents . get ( studentId ); } Exception Handling \u00b6 If we passed over a bad studentId, we received a Status 500 error We dont want that, because it exposes a lot of sensitive data We want to return error as JSON instead { \"status\" : 404 , \"message\" : \"Student id not found\" , \"timeStamp\" : 15261454867 } Development process \u00b6 Create custom error response class Create custom exception class Update REST service to throw exception Add an exception handler method using @ExceptionHandler Create custom error response class (we will define it as POJO) public class StudentErrorResponse { private int status ; private String message ; private long timeStamp ; // constructor + getter/setter } Create custom exception class (will be used by our REST service) public class StudentNotFoundException extends RuntimeException { public StudentNotFoundException ( String message ) { super ( message ); } } Update REST service to throw exception @RestController @RequestMapping ( \"/api\" ) public class StudentRestController { ... if ( ( studentId >= theStudents . size () ) || ( studentId < 0 ) ) { throw new StudentNotFoundException ( \"Student id not found - \" + studentId ); } // Happy Path return theStudents . get ( studentId ); } Add an exception handler method using @ExceptionHandler (Will response a ResponseEntity which is a wrapper for the HTTP response object) @RestController @RequestMapping ( \"/api\" ) public class StudentRestController { ... @ExceptionHandler public ResponseEntity < StudentErrorResponse > handleException ( StudentNotFoundException exc ) { StudentErrorResponse error = new StudentErrorResponse (); error . setStatus ( HttpStatus . NOT_FOUND . value ()); error . setMessage ( exc . getMessage ()); error . setTimeStamp ( System . currentTimeMillis ()); return new ResponseEntity <> ( error , HttpStatus . NOT_FOUND ); } } Edge cases \u00b6 What happens if we enter a String: /api/students/fdsjflsd It will return 400 Bad Request @RestController @RequestMapping ( \"/api\" ) public class StudentRestController { ... // add another handler to catch all @ExceptionHandler public ResponseEntity < StudentErrorResponse > handleException ( Exception exc ) { StudentErrorResponse error = new StudentErrorResponse (); error . setStatus ( HttpStatus . BAD_REQUEST . value ()); error . setMessage ( exc . getMessage ()); error . setTimeStamp ( System . currentTimeMillis ()); return new ResponseEntity <> ( error , HttpStatus . BAD_REQUEST ); } } Global Exception Handling \u00b6 Exception handler code is only for the specific REST controller Cant be reused by other controllers, like in large projects We can make use of @ControllerAdvice Pre-process requests to controller Post-process responses to handle exception Real-time use of AOP Development process \u00b6 Create new @ControllerAdvice Refactor our REST service to remove exception handling code Add exception handling code to @ControllerAdvice Create new @ControllerAdvice @ControllerAdvice public class StudentRestExceptionHandler { ... } Refactor our REST service to remove exception handling code ... Add exception handling code to @ControllerAdvice @ControllerAdvice public class StudentRestExceptionHandler { @ExceptionHandler public ResponseEntity < StudentErrorResponse > handleException ( StudentNotFoundException exc ) { StudentErrorResponse error = new StudentErrorResponse (); error . setStatus ( HttpStatus . NOT_FOUND . value ()); error . setMessage ( exc . getMessage ()); error . setTimeStamp ( System . currentTimeMillis ()); return new ResponseEntity <> ( error , HttpStatus . NOT_FOUND ); } } REST API Design \u00b6 Who and how will they use our API -> Design based on this E.g. for a CRM system Full CRUD support for our Customers Most prominent \"noun\" is \"customer\" Endpoint convention: customer Anti-Patterns \u00b6 Don't include actions in the endpoint Instead, use HTTP methods to assign actions Above, our endpoints don't have any actions in the names Examples \u00b6 CRUD Project \u00b6 Development Process \u00b6 Get customers Get single customer by ID Add a new customer Update customer Delete customer","title":"REST"},{"location":"rest.html#rest","text":"","title":"REST"},{"location":"rest.html#business-problem","text":"We try to build a client app that provides weather report for a city, so we need to get weather data from an external service.","title":"Business Problem"},{"location":"rest.html#json","text":"Curley braces define objects Object members are name / value pairs Name is always in \"\" { \"temp\" : 14 , \"temp_min\" : 9 , \"address\" : { \"street\" : \"Lerchenstra\u00dfe\" , ... }, ... }","title":"JSON"},{"location":"rest.html#java-json-data-binding","text":"Data binding is the process of converting JSON to Java POJO (Plain old Java Class)and vice versa. Also known as mapping / serialization, marshalling... its all the same Spring uses the Jackson Project behind the scenes Jackson handles data binding between JSON and Java POJO https://github.com/FasterXML/jackson-databind In conversion, Jackson will call appropriate getter / setters. It does NOT access private fields directly! import com.fasterxml.jackson.databind.ObjectMapper ; public class Driver { public statis void main ( String [] args ) throws Exception { ObjectMapper mapper = new ObjectMapper (); // Read data from json file, create an instance of this class and populate it Student myStudent = mapper . readValue ( new File ( \"data/sample.json\" ), Student . class ); } } Vice versa: import com.fasterxml.jackson.databind.ObjectMapper ; public class Driver { public statis void main ( String [] args ) throws Exception { ObjectMapper mapper = new ObjectMapper (); // Read data from json file, create an instance of this class and populate it Student myStudent = mapper . readValue ( new File ( \"data/sample.json\" ), Student . class ); mapper . enable ( SerializationFeature . INDENT_PUTPUT ); // just prettier writing mapper . writeValue ( new File ( \"data/output.json\" ), myStudent ); } }","title":"Java JSON Data Binding"},{"location":"rest.html#spring-jackson","text":"When building Spring REST apps, Spring will automatically handle Jackson integration JSON data being passed to REST controller is converted to POJO Java object being returned from REST controller is converted to JSON","title":"Spring &amp; Jackson"},{"location":"rest.html#http","text":"Most common use of REST is over HTTP CRUD operations POST (Create new entity) GET (Read a list of entities) PUT (Update entity) DELETE (Delete entity)","title":"HTTP"},{"location":"rest.html#spring-rest-controller","text":"@RestController its an extension of Controller Handles REST requests and response Will automatically convert Java POJOs to JSON as long as Jackson project is on the classpath or pom.xml @RestController @RequestMapping ( \"/test\" ) public class DemoRestController { @GetMapping ( \"/hello\" ) public String sayHello () { return \"Hello World\" ; } } Access REST endpoint at /test/hello","title":"Spring REST Controller"},{"location":"rest.html#creating-a-rest-service","text":"We are going to create a Service for Students We will make GET Requests via Postman on this Service Will return List<Student> , need to convert to JSON with Jackson If Jackson is a dependency via Maven or Gradle, then JSON data passed to a @RestController is automatically converted to POJO POJO passed to a @RestController is automatically converted to JSON","title":"Creating a REST Service"},{"location":"rest.html#path-variables","text":"Retrieve a single Student by id /api/students/{studentId} , that studentId is called PathVariable","title":"Path Variables"},{"location":"rest.html#exception-handling","text":"If we passed over a bad studentId, we received a Status 500 error We dont want that, because it exposes a lot of sensitive data We want to return error as JSON instead { \"status\" : 404 , \"message\" : \"Student id not found\" , \"timeStamp\" : 15261454867 }","title":"Exception Handling"},{"location":"rest.html#global-exception-handling","text":"Exception handler code is only for the specific REST controller Cant be reused by other controllers, like in large projects We can make use of @ControllerAdvice Pre-process requests to controller Post-process responses to handle exception Real-time use of AOP","title":"Global Exception Handling"},{"location":"rest.html#rest-api-design","text":"Who and how will they use our API -> Design based on this E.g. for a CRM system Full CRUD support for our Customers Most prominent \"noun\" is \"customer\" Endpoint convention: customer","title":"REST API Design"},{"location":"rest.html#crud-project","text":"","title":"CRUD Project"},{"location":"security.html","text":"Spring Security \u00b6","title":"Security"},{"location":"security.html#spring-security","text":"","title":"Spring Security"}]}