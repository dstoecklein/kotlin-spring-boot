{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"1. Spring Bean","text":"<p>A Spring Bean is simply a Java object. When Java objects are created by the Spring Container, then Spring refers to them as \"Spring Beans\".Spring Beans are created from normal Java classes ... just like Java objects.</p> <p>In summary, whenever you see \"Spring Bean\", just think Java object.</p>"},{"location":"index.html#2-spring-ioc-container-inversion-of-control","title":"2. Spring IoC Container (Inversion of Control)","text":"<p>Responsible for managing the objects (beans) of an application. It uses dependency injection to achieve inversion of control. <code>BeanFactory</code> and <code>ApplicationContext</code> represent the Spring IoC container. <code>BeanFactory</code> is the root interface for accessing the Spring container. <code>ApplicationContext</code> is a sub-interface of <code>BeanFactory</code>. * Create and manage objects (Inversion of control) * Tell <code>BeanFactory</code> to give me an object * Spring automatically creates objects based on configurations   * XML (legacy)   * Java Annotations (modern)   * Java Source Code (modern) * Inject objects dependencies (Dependency injection)</p>"},{"location":"index.html#3-spring-development-process","title":"3. Spring Development Process","text":"<ol> <li>Configure Spring Beans</li> <li>Create a Spring Container</li> <li>Retrieve Beans from Spring Container</li> </ol>"},{"location":"index.html#31-example-xml-based-configuration","title":"3.1 Example (XML-based configuration)","text":"<p><code>applicationContext.xml</code> <pre><code>&lt;beans&gt;\n&lt;bean id=\"myCoach\" class=\"com.dstoecklein.springdemo.BaseballCoach\"&gt;&lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre></p> <p>Creating a Spring Container. Note that <code>ClassPathXmlApplicationContext</code> is used to create the container. This loads an XML file from the classpath. There are more types: <code>AnnotationConfigApplicationContext</code>, <code>AnnotationConfigWebApplicationContext</code>, ... <pre><code>ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n</code></pre></p> <p>Retrieve Beans from container <pre><code>Coach theCoach = context.getBean(\"myCoach\", Coach.class);\n</code></pre></p>"},{"location":"index.html#4-dependency-injection","title":"4. Dependency Injection","text":"<ul> <li>A <code>car</code> object has multiple dependencies such as <code>engine</code> etc.</li> <li>A car factory (Spring object factory) assembles the car with its dependencies</li> <li>Injection types</li> <li>Constructor injection</li> <li>Setter injection</li> <li>Auto-Wiring via annotations</li> </ul>"},{"location":"index.html#41-constructor-injection","title":"4.1 Constructor injection","text":"<ol> <li>Define the dependency interface and class</li> <li>Create a constructor in your class for injections</li> <li>Configure the dependency injection in Spring config file</li> </ol> <p>Define the dependency interface and class <pre><code>public interface FortuneService {\npublic String getFortune();\n}\n\npublic class HappyFortuneService implements FortuneService {\npublic String getFortune() {\nreturn \"Today is your lucky day!\";\n}\n}\n</code></pre></p> <p>Create a constructor in your class for injections. A constructor that accepts dependencies. <pre><code>public class BaseballCoach implements Coach {\nprivate FortuneService fortuneService;\n\npublic BaseballCoach(FortuneService theFortuneService) {\nfortuneService = theFortuneService;\n}\n}\n</code></pre></p> <p>Configure the dependency injection in Spring config file <pre><code>&lt;bean id=\"myFortuneService\" class=\"com.dstoecklein.springdemo.HappyFortuneService\"&gt;\n&lt;/bean&gt;\n\n&lt;bean id=\"myCoach\" class=\"com.dstoecklein.springdemo.BaseballCoach\"&gt;\n&lt;constructor-arg ref=\"myFortuneService\" /&gt;\n&lt;/bean&gt;\n</code></pre></p>"},{"location":"index.html#411-whats-happening-behind-the-scenes","title":"4.1.1 What's happening behind the scenes","text":"<ul> <li>Spring will create objects for all beans </li> <li><code>HappyFortuneService myFortuneService = new HappyFortuneService();</code></li> <li><code>BaseballCoach myCoach = new BaseballCoach(myFortuneService);</code></li> </ul>"},{"location":"index.html#42-setter-injection","title":"4.2 Setter injection","text":"<ol> <li>Create setter methods for dependency injection</li> <li>Configure the dependency injection in Spring config file</li> </ol> <p>Create setter methods for dependency injection</p> <pre><code>public class CricketCoach implements Coach {\nprivate FortuneService fortuneService;\n\npublic CricketCoach() {\n}\n\n// this method will be called by Spring for injection\npublic void setFortuneService(FortuneService fortuneService) {\nthis.fortuneService = fortuneService;\n}\n}\n</code></pre> <p>Configure the dependency injection in Spring config file <pre><code>&lt;bean id=\"myFortuneService\" class=\"com.dstoecklein.springdemo.HappyFortuneService\"&gt;&lt;/bean&gt;\n\n&lt;bean id=\"myCricketCoach\" class=\"com.dstoecklein.springdemo.CricketCoach\"&gt;\n&lt;!-- Spring will look for setFortuneService. \n    We must define method name without \"set\" and with lower case \n    --&gt;   &lt;property name=\"fortuneService\" ref=\"myFortuneService\" /&gt;\n&lt;/bean&gt;\n</code></pre></p>"},{"location":"index.html#421-literal-injection","title":"4.2.1 Literal injection","text":"<ol> <li>Create setter methods for dependency injection</li> <li>Configure the dependency injection in Spring config file</li> </ol> <p>Create setter methods for dependency injection</p> <pre><code>public class CricketCoach implements Coach {\nprivate FortuneService fortuneService;\nprivate String emailAddress;\nprivate String team;\n\n// create a no-arg constructor\npublic CricketCoach() {\n}\n\n// create setter methods\npublic void setFortuneService(FortuneService fortuneService) {\nthis.fortuneService = fortuneService;\n}\n\npublic void setEmailAddress(String emailAddress) {\nthis.emailAddress = emailAddress;\n}\n\npublic void setTeam(String team) {\nthis.team = team;\n}\n}\n</code></pre> <p>Configure the dependency injection in Spring config file <pre><code>&lt;bean id=\"myCricketCoach\" class=\"com.dstoecklein.springdemo.CricketCoach\"&gt;\n&lt;!-- set up setter injection --&gt;\n&lt;property name=\"fortuneService\" ref=\"myFortuneService\"/&gt;\n&lt;property name=\"emailAddress\" value=\"example@team.com\"/&gt;\n&lt;property name=\"team\" value=\"ExampleTeam\"/&gt;\n&lt;/bean&gt;\n</code></pre></p>"},{"location":"index.html#422-inject-values-from-properties-file","title":"4.2.2 Inject values from Properties file","text":"<ul> <li> <p>Problem with literal injection is that values were hardcoded. We want to read these values from a properties file.</p> </li> <li> <p>Create Properties file</p> </li> <li>Load Properties file into Spring config file</li> <li>Reference values from Properties file</li> </ul> <p>Create Properties file <pre><code>foo.email=example@team.com\nfoo.team=exampleTeam\n</code></pre></p> <p>Load Properties file into Spring config file</p> <pre><code>&lt;context:property-placeholder location=\"classpath:sport.properties\"/&gt;\n</code></pre> <p>Reference values from Properties file <pre><code>&lt;bean id=\"myCricketCoach\" class=\"com.dstoecklein.springdemo.CricketCoach\"&gt;\n&lt;!-- set up setter injection --&gt;\n&lt;property name=\"fortuneService\" ref=\"myFortuneService\"/&gt;\n&lt;property name=\"emailAddress\" value=\"${foo.email}\"/&gt;\n&lt;property name=\"team\" value=\"${foo.team}\"/&gt;\n&lt;/bean&gt;\n</code></pre></p>"},{"location":"index.html#5-scopes","title":"5. Scopes","text":"<ul> <li>Refers to a lifecycle of a bean</li> <li>How long does the bean live</li> <li>How many instances are created</li> <li>How is the bean shared</li> <li>Default scope is <code>singleton</code></li> <li>Meaning the Spring container only creates 1 instances of a bean</li> </ul> <p>These will reference the same bean: <pre><code>Coach theCoach = context.getBean(\"myCoach\", Coach.class);\nCoach anotherCoach = context.getBean(\"myCoach\", Coach.class);\n</code></pre></p> <p>Another scopes are: * <code>prototype</code>: Creates new bean instance for each container request. Like the <code>new</code> keyword. * <code>request</code>: Scopes to an HTTP web request * <code>session</code>: Scoped to an HTTP web session * <code>global-session</code>: Scoped to a global HTTP web session</p>"},{"location":"index.html#6-bean-lifecycle","title":"6. Bean lifecycle","text":"<ul> <li>Container started -&gt; bean instantiated -&gt; dependency injected -&gt; internal Spring processing -&gt; Your custom init method (optional)</li> </ul> <pre><code>&lt;bean id=\"myCoach\" class=\"...\" init-method=\"doMyStartupStuff\"&gt;&lt;/bean&gt;\n&lt;bean id=\"myCoach\" class=\"...\" destroy-method=\"doMyCleanupStuff\"&gt;&lt;/bean&gt;\n</code></pre> <ol> <li>Define your methods for init and destroy</li> <li>Configure the method names in Spring config file</li> </ol>"},{"location":"annotations.html","title":"What are Java Annotations?","text":"<ul> <li>Labels that provide meta-data about the class</li> <li>Boot (Class): Color (label)</li> <li><code>@Override</code> telling the compiler that we want to override that method. At compile time, the compiler will verify the override.</li> </ul>"},{"location":"annotations.html#spring-configuration-with-annotations","title":"Spring Configuration with Annotations","text":"<ul> <li>XML can be very verbose</li> <li>Configure beans with Annotations</li> <li>Spring will scan your Java classes for annotations</li> <li>Automatically register the beans in the Spring container (no more XML needed).</li> </ul>"},{"location":"annotations.html#development-process","title":"Development Process","text":"<ol> <li>Enable component scanning in Spring config file</li> <li>Add the <code>@Component</code> Annotation to class</li> <li>Retrieve the bean from Spring container</li> </ol> <p>Enable component scanning in Spring config file <pre><code>&lt;beans ...&gt;\n&lt;context:component-scan base-package=\"com.dstoecklein.springdemo\" /&gt;\n&lt;/beans&gt;\n</code></pre></p> <p>Add the <code>@Component</code> Annotation to class. Will register bean. <code>thatSillyCoach</code> is the bean id. <pre><code>@Component(\"thatSillyCoach\")\npublic class TennisCoach implements Coach {\n\n@Override\npublic String getDailyWorkout() {\nreturn \"TennisCoach\";\n}\n}\n</code></pre></p> <p>Retrieve the bean from Spring container</p> <pre><code>Coach theCoach = context.getBean(\"thatSillyCoach\", Coach.class);\n</code></pre>"},{"location":"annotations.html#constructor-injection","title":"Constructor Injection","text":"<ul> <li>Now we are using <code>@Autowiring</code></li> <li>For dependency injection, Spring can autowire these dependencies</li> <li>Spring will look for a class that matches the property (by class or interface)</li> <li>3 types</li> <li>Constructor injection</li> <li>Setter injection</li> <li>Field injection</li> </ul>"},{"location":"annotations.html#autowiring-example","title":"Autowiring example","text":"<ul> <li>Injecting FortuneService into a Coach implementation</li> <li>Spring will scan <code>@Components</code></li> <li> <p>Did anyone implement FortuneService interface???</p> </li> <li> <p>Define the dependency interface and class</p> </li> <li>Create a constructor in your class for injections</li> <li>Configure the dependency injection with <code>@Autowired</code></li> </ul> <p>Define the dependency interface and class</p> <pre><code>public interface FortuneService {\npublic String getFortune();\n}\n\n@Component\npublic class HappyFortuneService implements FortuneService {\npublic String getFortune() {\nreturn \"Today is your lucky day!\";\n}\n}\n</code></pre> <p>Create a constructor in your class for injections Configure the dependency injection with <code>@Autowired</code></p> <pre><code>@Component\npublic class TennisCoach implements Coach {\nprivate FortuneService fortuneService;\n\n@Autowired\npublic TennisCoach(FortuneService theFortuneService) {\nfortuneService = theFortuneService;\n}\n}\n</code></pre> <p>Spring will find a bean that implements <code>FortuneService</code>, here its <code>HappyFortuneService</code>. So we get the <code>Coach</code> object and its <code>FortuneService</code> wired up together.</p>"},{"location":"annotations.html#setter-injection","title":"Setter injection","text":"<ul> <li> <p>Inject dependencies by calling setter methods</p> </li> <li> <p>Create setter methods in your class</p> </li> <li>Configure the dependency injection with <code>@Autowired</code></li> </ul> <p>Create setter methods in your class Configure the dependency injection with <code>@Autowired</code></p> <pre><code>public class TennisCoach implements Coach {\nprivate FortuneService fortuneService;\n\npublic TennisCoach() {}\n\n@Autowired\npublic void setFortuneService(FortuneService fortuneService) {\nthis.fortuneService = fortuneService;\n}\n}\n</code></pre>"},{"location":"annotations.html#field-injection","title":"Field injection","text":"<ul> <li>Inject dependencies by setting the field values on your class directly</li> <li> <p>Accomplished by using Java reflection</p> </li> <li> <p>Configure the dependency using <code>@Autowired</code></p> </li> <li>Applied directly on fields</li> <li>No setters required</li> </ul> <pre><code>public class TennisCoach implements Coach {\n\n@Autowired\nprivate FortuneService fortuneService;\n\npublic TennisCoach() {}\n}\n</code></pre>"},{"location":"annotations.html#which-injection-type-to-use","title":"Which injection type to use?","text":"<p>Choose a style and keep consistent.</p>"},{"location":"annotations.html#annotation-autowiring-and-qualifiers","title":"Annotation Autowiring and Qualifiers","text":"<ul> <li>But which implementation to choose if multiple interface implementations exist?</li> <li><code>NoUniqueBeanDefinitionException</code></li> <li>Add <code>beanId</code> to <code>@Qualifier</code></li> </ul> <pre><code>@Component\npublic class TennisCoach implements Coach {\n@Autowired\n@Qualifier(\"happyFortuneService\")\nprivate FortuneService fortuneService;\n}\n</code></pre>"},{"location":"annotations.html#bean-scopes-with-annotations","title":"Bean Scopes with Annotations","text":"<ul> <li>We have already used scopes with XML declarations</li> <li>We can do it using <code>@Scope(\"singleton\")</code> or <code>@Scope(\"prototype\")</code> in the Java class that implements interface.</li> </ul>"},{"location":"annotations.html#bean-lifecycle-methods-hooks","title":"Bean lifecycle methods / hooks","text":"<ul> <li>Remember, we can add custom code during bean initialization and bean destruction.</li> <li>We can do it using <code>@PostConstruct</code> or <code>@PreDestroy</code>.</li> </ul> <pre><code>@Component\npublic class TennisCoach implements Coach {\n\n@PostConstruct\npublic void doMyStartupStuff() {\n...\n}\n\n@PreDestroy\npublic void doMyCleanupStuff() {\n...\n}\n}\n</code></pre>"},{"location":"annotations.html#configure-a-spring-container-using-java-instead-of-xml","title":"Configure a Spring container using Java instead of XML","text":"<p>There are 3 ways of configuring a Spring container 1. Full XML config 2. XML Component Scan (making the XML a little smaller) 3. Java Configuration Class with <code>@Configuration</code></p> <p>Step by Step: 1. Create a Java class with <code>@Configuration</code> 2. Add component scan (optional) 3. Read Spring Java config class 4. Retrieve bean from Spring container</p> <p>Create a Java class with <code>@Configuration</code></p> <pre><code>@Configuration\npublic class SprotConfig {\n\n}\n</code></pre> <p>Add component scan (optional)</p> <pre><code>@Configuration\n@ComponentScan(\"com.dstoecklein.springdemo\")\npublic class SprotConfig {\n\n}\n</code></pre> <p>Read Spring Java config class <pre><code>AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SportConfig.class);\n</code></pre></p> <p>Retrieve bean from Spring container <pre><code>Coach theCoach = context.getBean(\"tennisCoach\", Coach.class);\n</code></pre></p>"},{"location":"annotations.html#defining-beans-using-java-instead-of-xml","title":"Defining Beans using Java instead of XML","text":"<pre><code>public class SwimCoach implements Coach {\n}\n</code></pre> <p>Step by Step: 1. Define method to expose the bean 2. Injection bean dependencies 3. Read Spring Java config class 4. Retrieve bean from Spring container</p> <p>Define method to expose the bean. Create new instance of <code>SwimCoach</code> inside our Config. The method name <code>swimCoach</code> will be the <code>beanId</code>. No <code>component Scan</code> required. <pre><code>@Configuration\npublic class SportConfig {\n\n@Bean\npublic Coach swimCoach() {\nSwimCoach mySwimCoach = new SwimCoach();\nreturn mySwimCoach;\n}\n}\n</code></pre></p> <p>Injection bean dependencies. We know our Coach need <code>Fortune</code> dependency. So how do we pull that in?</p> <p>We define a <code>bean</code> for <code>FortuneService</code> that returns a new instance of <code>happyFortuneService</code>. Again, the method name will be the <code>beanId</code>. Next we inject that dependency to <code>mySwimCoach</code>. <pre><code>@Configuration\npublic class SportConfig {\n\n@Bean\npublic FortuneService happyFortuneService() {\nreturn new HappyFortuneService();\n}\n\n@Bean\npublic Coach swimCoach() {\nSwimCoach mySwimCoach = new SwimCoach(happyFortuneService());\nreturn mySwimCoach;\n}\n}\n</code></pre></p> <p>Read Spring Java config class <pre><code>AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SportConfig.class);\n</code></pre></p> <p>Retrieve bean from Spring container <pre><code>Coach theCoach = context.getBean(\"swimCoach\", Coach.class);\n</code></pre></p>"},{"location":"annotations.html#inject-values-from-properties-file","title":"Inject values from properties file","text":"<p>Step by Step: 1. Create properties file 2. Load properties file in Spring config 3. Reference values from properties file</p> <p>Create properties file <pre><code>foo.email=example@team.com\nfoo.team=exampleTeam\n</code></pre></p> <p>Load properties file in Spring config</p> <pre><code>@Configuration\n@PropertySource(\"classpath:sport.properties\")\npublic class SportConfig {\n...\n}\n</code></pre> <p>Reference values from properties file <pre><code>public class SwimCoach implements Coach {\n@Value(\"${foo.email}\")\nprivate String email;\n\n@Value(\"${foo.team}\")\nprivate String team;\n}\n</code></pre></p>"},{"location":"aop.html","title":"Aspect Oriented Programming (AOP)","text":"<ul> <li>This is basic hibernate code as we did before to save an entity:</li> </ul> <pre><code>@Override\npublic void addAccount(Account theAccount, String userId) {\nSession session = sessionFactory.getCurrentSession();\nsession.save(theAccount);\n}\n</code></pre> <ul> <li>Now we have some new requirements from the boss, to add some logging.</li> <li>Need to log our DAO method</li> </ul> <pre><code>@Override\npublic void addAccount(Account theAccount, String userId) {\n// add logging (println, log4j, etc.)\n\nSession session = sessionFactory.getCurrentSession();\nsession.save(theAccount);\n}\n</code></pre> <ul> <li>New requirement comes in:</li> <li>Need to add security to our DAO before running the method</li> </ul> <pre><code>@Override\npublic void addAccount(Account theAccount, String userId) {\n// add logging (println, log4j, etc.)\n\n// add security check\n\nSession session = sessionFactory.getCurrentSession();\nsession.save(theAccount);\n}\n</code></pre> <ul> <li>New requirement comes in:</li> <li>Let's add this to Controller, Service also</li> </ul> <p>...</p> <ul> <li>New requirement comes in:</li> <li>Add this to our entire system</li> </ul> <p>...</p>"},{"location":"aop.html#problem-statement","title":"Problem statement","text":"<ul> <li>Code Tangling: We have logging and security code tangled in that specific business method, which is not good</li> <li>Code Scattering: We have to update all classes if changes to logging logic is required</li> </ul>"},{"location":"aop.html#possible-solution","title":"Possible Solution","text":"<ul> <li>Inheritance? (no)</li> <li>We still would need to go through all our classes and put \"extends\" in</li> <li>What if they already extend from another class -&gt; no multiple inheritance allowed in Java</li> <li>Delegation? (no)</li> <li>Same as above - need to touch all classes</li> <li>Aspect-Oriented Programming (yes)</li> <li>An Aspect encapsulates Cross-Cutting Concerns</li> <li>An Aspect can be reused at multiple locations, and it's basically just a class</li> </ul>"},{"location":"aop.html#aop-solution","title":"AOP Solution","text":"<ul> <li>Apply the Proxy design pattern</li> <li>The <code>Main App</code> simply going to make a method-call, it has no idea about ``AOP Proxy</li> <li>Everything happens behind the scene (like a spy)</li> </ul>"},{"location":"aop.html#benefits","title":"Benefits","text":"<ul> <li>Code for Aspect is defined in a single class</li> <li>Business code is cleaner</li> <li>Configurable (Can apply to different parts of app, no need to change main)</li> </ul>"},{"location":"aop.html#disadvantages","title":"Disadvantages","text":"<ul> <li>Too many Aspects make app flow hard to follow</li> <li>Minor performance cost</li> </ul>"},{"location":"aop.html#aop-use-cases","title":"AOP Use Cases","text":"<ul> <li>Logging, Security, Transaction</li> <li>Exception Handling</li> <li>API Management</li> <li>...</li> </ul>"},{"location":"aop.html#aop-terminology","title":"AOP Terminology","text":"<ul> <li>Aspect: Module of code for cross-cutting-concerns (logging, security, ...)</li> <li>Advice: What action is taken and when should be applied</li> <li>Join Point: When to apply code during program execution</li> <li>Pointcut: A predicate expression for where advice should be applied</li> </ul>"},{"location":"aop.html#advice-types","title":"Advice Types","text":"<ul> <li>Before advice: Run before the method</li> <li>After finally advice: Run after the method</li> <li>After returning advice: Run after the method (on success)</li> <li>After throwing advice: Run after the method (on exception)</li> <li>Around advice: Run before and after method</li> </ul>"},{"location":"aop.html#weaving","title":"Weaving","text":"<ul> <li>Connecting aspects to target objects to create an advised object</li> <li>Compile-time, load-time, run-time (slowest) weaving</li> </ul>"},{"location":"aop.html#aop-frameworks","title":"AOP Frameworks","text":"<ul> <li>Spring AOP (easier to use, lightweight)</li> <li>Only method-level join points</li> <li>Uses proxy pattern</li> <li>Security, Transactions, Caching</li> <li>Uses run-time weaving of aspects</li> <li>AspectJ (better for complex requirements)</li> <li>Support all join points</li> <li>Complete support for AOP</li> <li>Compile-time, post-compile, load-time weaving</li> </ul>"},{"location":"hibernate.html","title":"Hibernate","text":"<ul> <li>A framework for persisting or saving Java objects in a database</li> <li>You Java app -&gt; Hibernate -&gt; Database</li> <li>Handles all of the low level SQL code</li> <li>Minimizes JDBC code you have to develop and provides ORM</li> </ul>"},{"location":"hibernate.html#orm","title":"ORM","text":"<ul> <li>Developer defines mapping between Java class and database table</li> </ul> <pre><code>// create object\nStudent theStudent = new Student(\"John\", \"Doe\");\n\n// save it to DB and returns ID\nint theId = (Integer) session.save(theStudent);\n\n// retrieve from DB\nStudent myStudent = session.get(Student.class, theId);\n\n// query objects\nQuery query = session.createQuery(\"from student\"); // Hibernate Query Language\n\nList&lt;Student&gt; students = query.list();\n</code></pre>"},{"location":"hibernate.html#hibernate-jdbc-relationship","title":"Hibernate &amp; JDBC Relationship","text":"<ul> <li>Hibernate uses JDBC for all Database communications (its just another layer of abstraction)</li> </ul>"},{"location":"hibernate.html#hibernate-development-process","title":"Hibernate Development process","text":"<ol> <li>Add Hibernate config file</li> <li>Annotate Java Class</li> <li>Develop Java code to perform DB operations</li> </ol> <p>Add Hibernate config file. It tells Hibernate how to connect to the DB</p> <pre><code>&lt;hibernate-configuration&gt;\n\n&lt;session-factory&gt;\n\n&lt;!-- JDBC Database connection settings --&gt;\n&lt;property name=\"connection.driver_class\"&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;\n&lt;property name=\"connection.url\"&gt;jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&amp;amp;serverTimezone=UTC&lt;/property&gt;\n&lt;property name=\"connection.username\"&gt;hbstudent&lt;/property&gt;\n&lt;property name=\"connection.password\"&gt;hbstudent&lt;/property&gt;\n\n&lt;!-- JDBC connection pool settings ... using built-in test pool --&gt;\n&lt;property name=\"connection.pool_size\"&gt;1&lt;/property&gt;\n\n&lt;!-- Select our SQL dialect --&gt;\n&lt;property name=\"dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\n\n&lt;!-- Echo the SQL to stdout --&gt;\n&lt;property name=\"show_sql\"&gt;true&lt;/property&gt;\n\n&lt;!-- Set the current session context --&gt;\n&lt;property name=\"current_session_context_class\"&gt;thread&lt;/property&gt;\n\n&lt;/session-factory&gt;\n\n&lt;/hibernate-configuration&gt;\n</code></pre> <p>Annotate Java Class. Entity Class = Java class that is mapped to DB table 1. XML config (legacy) 2. Java Annotations (prefered)</p> <pre><code>@Entity\n@Table(name=\"student\")\npublic class Student {\n@Id // PK\n@GeneratedValue(strategy=GenerationType.IDENTITY) // PK if you wanna be explicit\n@GeneratedValue(strategy=GenerationType.AUTO)\n@GeneratedValue(strategy=GenerationType.SEQUENCE)\n@GeneratedValue(strategy=GenerationType.TABLE)\n@Column(name=\"id\")\nprivate int id;\n\n@Column(name=\"first_name\")\nprivate String firstName;\n}\n</code></pre> <p>Develop Java code to perform DB operations</p> <ul> <li><code>SessionFactory</code>: Reads the hibernate config file, creates session objects, only create once in your app</li> <li><code>Session</code>: Wraps a JDBC connection, Main object to save/retrieve objects, retrieved from SessionFactory, short-lived object (use it and then throw it away)</li> </ul> <pre><code>SessionFactory = factory = new Configuration()\n.configure(\"hibernate.cfg.xm\")\n.addAnnotatedClass(Student.class)\n.buildSessionFactory();\n\nSession session = factory.getCurrentSession();\n\ntry {\n// create student object\nStudent tempStudent = new Student();\n\n// start transaction (hibernate knows how to map this object based on our annotion)\nsession.beginTransaction();\n\n// save the student\nsession.save(tempStudent);\n\n// commit the transaction\nsession.getTransaction().commit();\n} finally {\nfactory.close();\n}\n</code></pre>"},{"location":"hibernate.html#retrieve-an-object","title":"Retrieve an object","text":"<ul> <li>In hibernate we retrieve objects by its ID (Primary Key)</li> </ul> <pre><code>Student myStudent = session.get(Student.class, theStudent.getId());\n</code></pre>"},{"location":"hibernate.html#querying-objects","title":"Querying Objects","text":"<ul> <li>Using HQL, similar to SQL</li> </ul> <pre><code>// use the Java class name here\nList&lt;Student&gt; theStudents = session.createQuery(\"from Student\").getResultList();\n\nList&lt;Student&gt; theStudents = session.createQuery(\"from Student s where s.lastName='Doe'\").getResultList();\n</code></pre>"},{"location":"hibernate.html#updating-objects","title":"Updating Objects","text":"<pre><code>int studentId = 1;\nStudent myStudent = session.get(Student.class, studentId);\n\nmyStudent.setFirstName(\"Scooby\");\n\nsession.getTransaction().commit();\n</code></pre> <p>For multiple updates: <pre><code>session.createQuery(\"update Student set email='foo@gmail.com'\").executeUpdate();\n</code></pre></p>"},{"location":"hibernate.html#deleting-objects","title":"Deleting Objects","text":"<pre><code>int studentId = 1;\nStudent myStudent = session.get(Student.class, studentId);\n\nsession.delete(myStudent);\n\nsession.getTransaction().commit();\n</code></pre> <p>For multiple deletions: <pre><code>session.createQuery(\"delete from Student where id=2\").executeUpdate();\n</code></pre></p>"},{"location":"hibernate.html#advanced-mappings","title":"Advanced Mappings","text":"<ul> <li>1:n, n:m, etc.</li> <li>PK and FK</li> <li>CASCADE, ...</li> </ul>"},{"location":"hibernate.html#11-mapping","title":"1:1 mapping","text":"<p>Create <code>InstructorDetail</code> table <pre><code>@Entity\n@Table(name=\"instructor_detail\")\npublic class InstructorDetail {\n@Id\n@GeneratedValue(strategy=GenerationType.IDENTITY)\n@Column(name=\"id\")\nprivate int id;\n\n...\n}\n</code></pre></p> <p>Create <code>Instructor</code> table and map to <code>InstructorDetail</code></p> <pre><code>@Entity\n@Table(name=\"instructor\")\npublic class Instructor {\n@Id\n@GeneratedValue(strategy=GenerationType.IDENTITY)\n@Column(name=\"id\")\nprivate int id;\n\n@OneToOne(cascade=CascadeType.ALL)\n@JoinColumn(name=\"instructor_detail_id\")\nprivate InstructorDetail instructorDetail;\n\n...\n\n}\n</code></pre> <p>Create Main App</p> <pre><code>public static void main(String[] args) {\nInstructor tempInstructor = new Instructor(\"Max\", \"Musterman\", \"maxmuster@gmail.com\");\nInstructorDetail tempInstructorDetail = new InstructorDetail(\"http://www.example.com\", \"Heyya!\");\n\ntempInstructor.setInstructorDetail(tempInstructorDetail);\n\nsession.beginTransaction();\nsession.save(tempInstructor);\nsession.getTransaction().commit();\n}\n</code></pre>"},{"location":"hibernate.html#11-bi-directional","title":"1:1 Bi-Directional","text":"<ul> <li>If we load an InstructorDetail, we want to get the associated Instructor</li> <li>Cant do this with our uni-directional setup</li> </ul> <p>Changes to <code>InstructorDetail</code> <pre><code>@Entity\n@Table(name = \"instructor_detail\")\npublic class InstructorDetail {\n\n@OneToOne(mappedBy = \"instructorDetail\", cascade=CascadeType.ALL) // refers to the instructorDetail property in Instructor.class\nprivate Instructor instructor;\n\npublic Instructor getInstructor() {\nreturn instructor;\n}\n\npublic void setInstructor(Instructor instructor) {\nthis.instructor = instructor;\n}\n}\n</code></pre></p> <p>Create Main App <pre><code>public static void main(String [] args) {\nint theId = 1;\nInstructorDetail = temp = session.get(InstructorDetail.class, theId);\n\nSysout(temp.getInstructor());\n}\n</code></pre></p>"},{"location":"hibernate.html#stoped-at-lecture-23-video-12","title":"STOPED AT LECTURE 23, VIDEO 12","text":""},{"location":"hibernate_mvc_project.html","title":"Hibernate &amp; MVC Project","text":"<ul> <li>Build a CRM System</li> </ul>"},{"location":"hibernate_mvc_project.html#development-process","title":"Development Process","text":"<ul> <li>Create tables (see SQL scripts)</li> <li>Add JDBC Driver for MySQL (to <code>WEB-INF/lib/mysql-connector.jar</code>)</li> <li>Copy over <code>web.xml</code> and <code>spring-mvc-crud-demo-servlet.xml</code> as starter files</li> <li>Sanity test to make sure we can connect to DB</li> </ul>"},{"location":"hibernate_mvc_project.html#big-picture","title":"Big Picture","text":"<ul> <li>Our DAO will make use of the Hibernate API for accessing data and sending it back to the controller</li> <li>This DAO object will have methods for</li> <li><code>saveCustomer()</code></li> <li><code>getCustomer()</code></li> <li><code>updateCustomer()</code></li> <li><code>deleteCustomer()</code></li> </ul>"},{"location":"hibernate_mvc_project.html#listing-customers","title":"Listing customers","text":"<ul> <li>Create <code>Customer.java</code> entity class</li> <li>Create <code>CustomerDAO.java</code> + <code>CustomerDAOImpl.java</code></li> <li>Create <code>CustomerController.java</code></li> <li>Create JSP page <code>list-customer.jsp</code></li> </ul>"},{"location":"hibernate_mvc_project.html#create-customerjava-entity-class","title":"Create <code>Customer.java</code> entity class","text":"<pre><code>@Entity\n@Table(name = \"customer\")\npublic class Customer {\n\n@Id\n@Column(name = \"id\")\nprivate int id;\n\n@Column(name = \"firstName\")\nprivate String firstName;\n\n...\n</code></pre> <p>Remember: How will Hibernate or Spring know about our entity classes?</p> <p><code>spring-mvc-crud-demo-servlet.xml</code></p> <pre><code>&lt;bean id=\"sessionFactory\"\nclass=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"&gt;\n&lt;property name=\"dataSource\" ref=\"myDataSource\" /&gt;\n&lt;property name=\"packagesToScan\" value=\"com.dstoecklein.springdemo.entity\" /&gt;\n...\n</code></pre>"},{"location":"hibernate_mvc_project.html#create-customerdaojava-customerdaoimpljava","title":"Create <code>CustomerDAO.java</code> + <code>CustomerDAOImpl.java</code>","text":"<ul> <li>For Hibernate our DAO needs a <code>SessionFactory</code></li> <li>Factory needs a data source (how connect to DB etc.)</li> <li>All of these are dependencies, so we can use dependency injection here</li> </ul> <p><code>spring-mvc-crud-demo-servlet.xml</code> <pre><code>&lt;bean id=\"myDataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"\ndestroy-method=\"close\"&gt;\n&lt;property name=\"driverClass\" value=\"com.mysql.cj.jdbc.Driver\" /&gt;\n&lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://localhost:3306/web_customer_tracker?useSSL=false&amp;amp;serverTimezone=UTC\" /&gt;\n&lt;property name=\"user\" value=\"hbstudent\" /&gt;\n&lt;property name=\"password\" value=\"hbstudent\" /&gt;\n...\n</code></pre></p> <pre><code>&lt;bean id=\"sessionFactory\"\nclass=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"&gt;\n&lt;property name=\"dataSource\" ref=\"myDataSource\" /&gt;\n...\n</code></pre> <p></p> <p>Define the DAO interface</p> <pre><code>public interface CustomerDAO {\npublic List&lt;Customer&gt; getCustomers();\n}\n</code></pre> <p>Define DAO implementation</p> <pre><code>public class CustomerDAOImp implements CustomerDAO {\n@Autowired\nprivate SessionFactory sessionFactory;\n\npublic List&lt;Customer&gt; getCustomers() {\n...\n}\n}\n</code></pre> <ul> <li>Spring provides this special annotation <code>@Transactional</code> to automatically begin and end a transaction for your hibernate code</li> <li>No need for stuff like <code>session.beginTransaction()</code> or <code>session.getTransaction().commit();</code></li> </ul> <pre><code>public class CustomerDAOImp implements CustomerDAO {\n@Autowired\nprivate SessionFactory sessionFactory;\n\n@Transactional\npublic List&lt;Customer&gt; getCustomers() {\nSession currentSession = sessionFactory.getCurrentSession();\n\nQuery&lt;Custoer&gt; theQuery = currentSession.createQuery(\"from Customer\", Customer.class);\n\nList&lt;Customer&gt; customers = theQuery.getResultList();\n\nreturn customers;\n}\n}\n</code></pre> <ul> <li>Spring has another special annotation <code>@Repository</code> for DAOs</li> <li>Place at the Top of the DAO implementation</li> <li>Spring will automatically register the DAO implementation</li> <li>Spring will provide translation of any JDBC related exceptions</li> </ul> <p></p> <pre><code>@Repository\npublic class CustomerDAOImpl implements CustomerDAO {\n@Autowired\nprivate SessionFactory sessionFactory;\n\n@Transactional\npublic List&lt;Customer&gt; getCustomers() {\nSession currentSession = sessionFactory.getCurrentSession();\n\nQuery&lt;Custoer&gt; theQuery = currentSession.createQuery(\"from Customer\", Customer.class);\n\nreturn theQuery.getResultList();\n}\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#create-customercontrollerjava","title":"Create <code>CustomerController.java</code>","text":"<ul> <li>Inject DAO into controller</li> <li>Remember: Spring gonna scan for components that implements the <code>CustomerDAO</code> interface</li> </ul> <pre><code>@Controller\n@RequestMapping(\"/customer\")\npublic class CustomerController {\n\n// inject customer DAO\n@Autowired\nprivate CustomerDAO customerDAO;\n\n@RequestMapping(\"/list\")\npublic String listCustomers(Model theModel) {\n\n// get customer from DAO\nList&lt;Customer&gt; theCustomers = customerDAO.getCustomers();\n\n// add customers to the mode\ntheModel.addAttribute(\"customers\", theCustomers);\n\nreturn \"list-customers\";\n}\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#create-jsp-page-list-customerjsp","title":"Create JSP page <code>list-customer.jsp</code>","text":"<p>...</p>"},{"location":"hibernate_mvc_project.html#adding-css","title":"Adding CSS","text":"<pre><code>&lt;!-- Add support for reading web resources: css, images, js, etc ... --&gt;\n&lt;mvc:resources location=\"/resources/\" mapping=\"/resources/**\"/&gt;\n</code></pre>"},{"location":"hibernate_mvc_project.html#add-welcome-file","title":"Add Welcome File","text":"<ul> <li>Configured in <code>web.xml</code></li> </ul>"},{"location":"hibernate_mvc_project.html#getmapping-postmapping","title":"<code>@GetMapping</code> &amp; <code>@PostMapping</code>","text":"<ul> <li>On HTML Form we add something like</li> </ul> <pre><code>&lt;form action=\"\"processForm\" method=\"GET\" ...&gt;\n</code></pre> <ul> <li> <p>What we did so far is to use <code>@RequestMapping()</code> which actually handles ALL HTTP methods (GET, POST, PUT, ...) <pre><code>@RequestMapping(\"/processForm\")\npublic String processForm(...) {\n...\n}\n</code></pre></p> </li> <li> <p>We can constraint the mapping by using  <pre><code>@RequestMapping(\"/processForm\", method=RequestMethod.GET)\npublic String processForm(...) {\n...\n}\n</code></pre></p> </li> <li> <p>With <code>@GetMapping</code> &amp; <code>@PostMapping</code> we can shortcut the above mapping</p> </li> </ul> <pre><code>@GetMapping(\"/processForm\")\npublic String processForm(...) {\n...\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#when-to-use-what","title":"When to use what","text":"<ul> <li><code>GET</code>: Good for debugging, limitations on data length, can bookmark the URL</li> <li><code>POST</code>: no limitations on data length, can send bindary data, cant bookmark the URL</li> </ul>"},{"location":"hibernate_mvc_project.html#service-annotation","title":"<code>@Service</code> Annotation","text":"<ul> <li>Refactor: Add a service layer which sits between our controller and DAO</li> <li>The purpose: Implementation of Service Facade design pattern, able to integrate data from multiple sources</li> <li><code>@Service</code> also inherits from <code>@Component</code></li> <li>Its applied to the Service implementation</li> </ul>"},{"location":"hibernate_mvc_project.html#development-process_1","title":"Development process","text":"<ul> <li>Define Service interface</li> <li>Define Service implementation</li> <li>Inject DAO</li> </ul> <p>Define Service interface <pre><code>public interface CustomerService {\npublic List&lt;Customer&gt; getCustomers();\n}\n</code></pre></p> <p>Define Service implementation <pre><code>@Service\npublic class CustomerServiceImpl implements CustomerService {\n@Autowired\nprivate CustomerDAO customerDAO;\n\n@Transactional\npublic List&lt;Customer&gt; getCustomers() {\n...\n}\n}\n</code></pre></p> <ul> <li>We also move the <code>@Transactional</code> part to our service, because our Service define the begin and end of a given transaction.</li> </ul> <pre><code>@Repository\npublic class CustomerDAOImpl implements CustomerDAO {\n\n// inject dependency\n@Autowired\nprivate SessionFactory sessionFactory;\n\n@Override\npublic List&lt;Customer&gt; getCustomers() {\n\n// get current hibernate session\nSession currentSession = sessionFactory.getCurrentSession();\n\n// create query\nQuery&lt;Customer&gt; theQuery = currentSession.createQuery(\"from Customer\", Customer.class);\n\nreturn theQuery.getResultList();\n}\n}\n</code></pre> <ul> <li>Modification to Controller to use customerService instead of DAO.</li> </ul> <pre><code>@Controller\n@RequestMapping(\"/customer\")\npublic class CustomerController {\n\n@Autowired\nprivate CustomerService customerService;\n\n@GetMapping(\"/list\")\npublic String listCustomers(Model theModel) {\n\n// get customer from DAO\nList&lt;Customer&gt; theCustomers = customerService.getCustomers();\n\n// add customers to the model\ntheModel.addAttribute(\"customers\", theCustomers);\n\nreturn \"list-customers\";\n}\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#add-a-customer","title":"Add a Customer","text":"<ul> <li>Update <code>list-customer.jsp</code></li> <li>Create HTML for new customer</li> <li>Process Form data: Controller -&gt; Service -&gt; DAO</li> </ul> <p>Update <code>list-customer.jsp</code></p> <pre><code>&lt;!-- new button: Add customer --&gt;\n&lt;input type=\"button\" value=\"Add Customer\" \n       onclick=\"window.location.href='showFormForAdd'\" ; return false; \n       class=\"add-button\"\n/&gt;\n</code></pre> <p>Create HTML for new customer</p> <p><code>CustomerController.java</code> <pre><code>@GetMapping(\"/showFormForAdd\")\npublic String showFormForAdd(Model theModel) {\n\nCustomer theCustomer = new Customer();\n\ntheModel.addAttribute(\"customer\", theCustomer);\n\nreturn \"customer-form\";\n}\n</code></pre></p> <p><code>customer-form.jsp</code> <pre><code>&lt;%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %&gt;\n\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Save Customer&lt;/title&gt;\n\n  &lt;link type=\"text/css\"\n        rel=\"stylesheet\"\n        href=\"${pageContext.request.contextPath}/resources/css/style.css\"\n  /&gt;\n\n  &lt;link type=\"text/css\"\n        rel=\"stylesheet\"\n        href=\"${pageContext.request.contextPath}/resources/css/add-customer-style.css\"\n  /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;div id=\"wrapper\"&gt;\n  &lt;div id=\"header\"&gt;\n    &lt;h2&gt;CRM - Customer Relationship Manager&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div id=\"container\"&gt;\n  &lt;h3&gt;Save Customer&lt;/h3&gt;\n\n  &lt;form:form action=\"saveCustomer\" modelAttribute=\"customer\" method=\"post\"&gt;\n    &lt;table&gt;\n      &lt;tbody&gt;\n      &lt;tr&gt;\n        &lt;td&gt;&lt;label&gt;First name:&lt;/label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"firstName\" /&gt;&lt;/td&gt;\n\n        &lt;td&gt;&lt;label&gt;Last name:&lt;/label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"lastName\" /&gt;&lt;/td&gt;\n\n        &lt;td&gt;&lt;label&gt;Email:&lt;/label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;form:input path=\"email\" /&gt;&lt;/td&gt;\n\n        &lt;td&gt;&lt;label&gt;&lt;/label&gt;&lt;/td&gt;\n        &lt;td&gt;&lt;input type=\"submit\" value=\"Save\" class=\"save\" /&gt;&lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/form:form&gt;\n\n  &lt;div style=\"clear: both\"&gt;&lt;/div&gt;\n\n  &lt;p&gt;\n    &lt;a href=\"${pageContext.request.contextPath}/customer/list\"&gt;Back to List&lt;/a&gt;\n  &lt;/p&gt;\n\n&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre></p> <p>Process Form data: Controller -&gt; Service -&gt; DAO</p> <p><code>CustomerService.java</code> <pre><code>public interface CustomerService {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n}\n</code></pre></p> <p><code>CustomerServiceImpl.java</code> <pre><code>@Override\n@Transactional\npublic void saveCustomer(Customer theCustomer) {\ncustomerDAO.saveCustomer(theCustomer);\n}\n</code></pre></p> <p><code>CustomerDAO.java</code> <pre><code>public interface CustomerDAO {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n}\n</code></pre></p> <p><code>CustomerDAOImpl.java</code> <pre><code>@Override\npublic void saveCustomer(Customer theCustomer) {\n\nSession currentSession = sessionFactory.getCurrentSession();\n\ncurrentSession.save(theCustomer);\n}\n</code></pre></p> <p><code>CustomerController.java</code></p> <pre><code>@PostMapping(\"/saveCustomer\")\npublic String saveCustomer(@ModelAttribute(\"customer\") Customer theCustomer) {\n\ncustomerService.saveCustomer(theCustomer);\n\nreturn \"redirect:/customer/list\";\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#sort-customer-by-last-name","title":"Sort Customer by last name","text":"<p><code>CustomerDAOImpl.java</code> <pre><code>Query&lt;Customer&gt; theQuery = currentSession.createQuery(\"from Customer order by lastName\", Customer.class);\n</code></pre></p>"},{"location":"hibernate_mvc_project.html#update-customer","title":"Update Customer","text":"<p><code>customer-form.jsp</code> * Update so that it handles params <code>customerId</code>:   * <code>http://localhost:8080/web-customer-tracker/customer/showFormUpdate?customerId=1</code> <pre><code>...\n    &lt;th&gt;Action&lt;/th&gt;\n...\n  &lt;!-- loop over and print our customers --&gt;\n  &lt;c:forEach var=\"tempCustomer\" items=\"${customers}\"&gt;\n\n    &lt;!-- construct update link with customer id --&gt;\n    &lt;c:url var=\"updateLink\" value=\"/customer/showFormForUpdate\"&gt;\n      &lt;:c:param name=\"customerId\" value=\"${tempCustomer.id}\" /&gt;\n    &lt;/c:url&gt;\n\n    &lt;tr&gt;\n      &lt;td&gt; ${tempCustomer.firstName} &lt;/td&gt;\n      &lt;td&gt; ${tempCustomer.lastName} &lt;/td&gt;\n      &lt;td&gt; ${tempCustomer.email} &lt;/td&gt;\n      &lt;td&gt;\n        &lt;a href=\"${updateLink}\"&gt;Update&lt;/a&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n\n  &lt;/c:forEach&gt;\n...\n</code></pre></p> <p><code>CustomerService.java</code> <pre><code>public interface CustomerService {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n\npublic Customer getCustomer(int theId);\n}\n</code></pre></p> <p><code>CustomerServiceImpl.java</code> <pre><code>@Override\n@Transactional\npublic Customer getCustomer(int theId) {\nreturn customerDAO.getCustomer(theId);\n}\n</code></pre></p> <p><code>CustomerDAO.java</code> <pre><code>public interface CustomerDAO {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n\npublic Customer getCustomer(int theId);\n}\n</code></pre></p> <p><code>CustomerDAOImpl.java</code> <pre><code>@Override\npublic Customer getCustomer(int theId) {\n\nSession currentSession = sessionFactory.getCurrentSession();\n\nCustomer theCustomer = currentSession.get(Customer.class, theId);\n\nreturn theCustomer;\n}\n</code></pre></p> <p><code>CustomerController.java</code></p> <pre><code>@GetMapping(\"/showFormForUpdate\")\npublic String showFormForUpdate(@RequestParam(\"customerId\") int theId, Model theModel) {\n\nCustomer theCustomer = customerService.getCustomer(theId);\n\ntheModel.addAttribute(\"customer\", theCustomer);\n\nreturn \"customer-form\";\n}\n</code></pre>"},{"location":"hibernate_mvc_project.html#save-customer-to-db","title":"Save customer to DB","text":"<p><code>customer-form.jsp</code> * When form is loaded, Spring will do <code>customer.get(id)</code> and place it in hidden form field * Then when we do a submit, Spring will submit this data by saying <code>customer.set(id)</code> * So backend knows on which customer to perform the update on * Very important line</p> <pre><code>&lt;!-- need to associate this data with customer id --&gt;\n&lt;form:hidden path=\"id\" /&gt;\n</code></pre> <ul> <li>Use UPSERT in DAO implementation instead of <code>save</code> <code>CustomerDAOImpl.java</code> <pre><code>currentSession.saveOrUpdate(theCustomer);\n</code></pre></li> </ul>"},{"location":"hibernate_mvc_project.html#delete-customer","title":"Delete Customer","text":"<p><code>list-customer.html</code> <pre><code>...\n&lt;c:url var=\"deleteLink\" value=\"/customer/delete\"&gt;\n  &lt;:c:param name=\"customerId\" value=\"${tempCustomer.id}\" /&gt;\n&lt;/c:url&gt;\n...\n  &lt;a href=\"${updateLink}\"&gt;Update&lt;/a&gt;\n  |\n  &lt;a href=\"${deleteLink}\"\n     onclick=\"if (!(confirm('Are you sure you want to delete this customer?'))) return false\"&gt;Delete&lt;/a&gt;\n...\n</code></pre></p> <p><code>CustomerService.java</code> <pre><code>public interface CustomerService {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n\npublic Customer getCustomer(int theId);\n\npublic void deleteCustomer(int theId);\n}\n</code></pre></p> <p><code>CustomerServiceImpl.java</code> <pre><code>@Override\n@Transactional\npublic void deleteCustomer(int theId) {\ncustomerDAO.deleteCustomer(theId);\n}\n</code></pre></p> <p><code>CustomerDAO.java</code> <pre><code>public interface CustomerDAO {\npublic List&lt;Customer&gt; getCustomers();\n\npublic void saveCustomer(Customer theCustomer);\n\npublic Customer getCustomer(int theId);\n\npublic void deleteCustomer(int theId);\n}\n</code></pre></p> <p><code>CustomerDAOImpl.java</code> <pre><code>    @Override\npublic void deleteCustomer(int theId) {\nSession currentSession = sessionFactory.getCurrentSession();\n\nQuery theQuery = currentSession.createQuery(\"delete from Customer where id=:customerId\");\ntheQuery.setParameter(\"customerId\", theId);\ntheQuery.executeUpdate();\n}\n</code></pre></p> <p><code>CustomerController.java</code></p> <pre><code>@GetMapping(\"/delete\")\npublic String deleteCustomer(@RequestParam(\"customerId\") int theId, Model theModel) {\ncustomerService.deleteCustomer(theId);\n\nreturn \"redirect:/customer/list\";\n}\n</code></pre>"},{"location":"maven.html","title":"Maven","text":"<ul> <li>Project management tool for build management and dependencies</li> <li>Automatically download and add .jar files to classpath</li> <li>For that Maven has its own Repository</li> <li>We give Maven a shopping list, and it \"buys\" all the dependencies</li> <li>Maven will read config file (shopping list)</li> <li>Maven will check local repo.</li> <li>If not local available, it will pull the dependencies from maven repo.</li> </ul>"},{"location":"maven.html#standard-directory-structure","title":"Standard directory structure","text":""},{"location":"maven.html#key-concepts","title":"Key concepts","text":"<ul> <li>Pom file</li> <li>Project Object Model file (shopping list)</li> <li>Located in root of project</li> </ul> <ul> <li>Project Coordinates to identify project</li> <li><code>Group ID</code>: Name of company, convention is to use reverse domain: <code>com.dstoecklein</code></li> <li><code>Artifact ID</code>: Name for this project <code>coolapp</code></li> <li><code>Version</code> (optional): If project under active development: <code>1.0-SNAPSHOT</code></li> </ul>"},{"location":"maven.html#archetypes","title":"Archetypes","text":"<ul> <li>Can be used to create new Maven projects</li> <li>A collection of \"starter files\" for a project, like Java project, Web project etc.</li> <li>Common archetypes:</li> <li>maven-archetype-quickstart: Generate sample Maven project</li> <li>maven-archetype-webapp: Sample Maven webapp</li> <li>...</li> </ul>"},{"location":"maven.html#maven-private-repositories","title":"Maven private repositories","text":"<ul> <li>Only available within organization, needs Maven server for example:</li> <li>JFrog</li> <li>Sonatype</li> <li>Apache</li> <li>...</li> <li>Or use cloud hosted solutions</li> <li>packagecloud.io</li> <li>mymavenrepo.com</li> <li>...</li> </ul>"},{"location":"mvc.html","title":"Spring MVC","text":"<ul> <li>Framework for building web applications in Java.</li> <li>Based on Model-View-Controller design pattern</li> <li>Leverage features of the Core Spring Framework (Inversion of Control, Dependency Injection)</li> <li>Incoming request -&gt; Front controller delegates request to controller -&gt; create a model -&gt; pass that model to view template (HTML page) -&gt; show view template in browser</li> </ul>"},{"location":"mvc.html#benefits","title":"Benefits","text":"<ul> <li>Spring way of building web app UIs in Java</li> <li>Reusable UI components</li> <li>Help manage app state for requests</li> </ul>"},{"location":"mvc.html#behind-the-scenes-of-spring-mvc","title":"Behind the scenes of Spring MVC","text":"<p>Components: * A set of web pages (UI components) * A collection of Spring beans * Spring configuration (XML, Annotations or Java)</p> <p>Everything starts off with an incoming request.</p> <p></p>"},{"location":"mvc.html#front-controller","title":"Front controller","text":"<ul> <li>Known as DispatcherServlet</li> <li>Delegates request to the other objects</li> <li>Part of Spring Framework, already developed by Spring dev team</li> </ul>"},{"location":"mvc.html#controller","title":"Controller","text":"<ul> <li>Handles request</li> <li>Store/retrieve data (db, web services)</li> <li>Place data in model</li> </ul>"},{"location":"mvc.html#model","title":"Model","text":"<ul> <li>Contains your data</li> <li>Place data in the model</li> <li>Data can be Java object / collection</li> </ul>"},{"location":"mvc.html#view-template","title":"View template","text":"<ul> <li>Displays data</li> <li>Most common is JSP + JSTL</li> <li>Other templates are: Thymeleaf, Groovy, Velocity, ...</li> </ul>"},{"location":"mvc.html#spring-mvc-configuration-most-complicatedimportant","title":"Spring MVC configuration (most complicated/important)","text":""},{"location":"mvc.html#part-1","title":"Part 1","text":"<ul> <li>Add configurations to file: <code>WEB-INF/web.xml</code></li> <li>Configure Spring MVC Dispatcher-Servlet (Remember: Its part of Spring)</li> <li>Set up URL mappings to Spring MVC Dispatcher-Servlet</li> </ul> <p><pre><code>&lt;web-app&gt;\n&lt;servlet&gt;\n&lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n&lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\n&lt;init-param&gt;\n&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n&lt;param-value&gt;/WEB-INF/spring-mvc-demo-servlet.xml&lt;/param-value&gt;\n&lt;/init-param&gt;\n\n&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n&lt;/servlet&gt;\n\n&lt;servlet-mapping&gt;\n&lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n&lt;url-pattern&gt;/&lt;/url-pattern&gt;\n&lt;/servlet-mapping&gt;\n&lt;/web-app&gt;\n</code></pre> <code>servlet-name</code> must match in mapping: <code>dispatcher</code></p>"},{"location":"mvc.html#part","title":"Part","text":"<ul> <li>Add configurations to file: <code>WEB-INF/spring-mvc-demo-servlet.xml</code></li> <li>Add support for Spring component scanning</li> <li>Add support for conversion, formatting and validation</li> <li>Configure Spring MVC View Resolver</li> </ul> <pre><code>&lt;beans&gt;\n&lt;!-- Add support for Spring component scanning --&gt;\n&lt;context:component-scan base-package=\"com.dstoecklein.springdemo\" /&gt;\n&lt;!-- Add support for conversion, formatting and validation --&gt;\n&lt;mvc:annotation-driven/&gt;\n&lt;!-- Configure Spring MVC View Resolver --&gt;\n&lt;bean&gt;\nclass=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\n    &lt;property name=\"prefix\" value=\"/WEB-INF/view\" /&gt;\n&lt;property name=\"suffix\" value=\".jsp\" /&gt;\n&lt;/bean&gt;\n&lt;/beans&gt;\n</code></pre> <p><code>InternalResourceViewResolver</code> means: How are pages be rendered?</p> <p>For example: We returned a view name of <code>show-student-list</code>. Then Spring will automatically add the prefix and suffix: <code>/WEB-INF/view/show-student-list.jsp</code>.</p>"},{"location":"mvc.html#our-first-mvc-app","title":"Our First MVC App","text":"<ol> <li>Create Controller class</li> <li>Annotate with <code>@Controller</code>. It tells MVC that this class is a controller. It also inherits from <code>@Component</code>, this will automatically picked up by component scanning.</li> <li>Define Controller method</li> <li>In our case <code>public String showPage()</code></li> <li>Add request mapping to controller method</li> <li><code>@RequestMapping(\"/\")</code>. So we map the method to this root path. So when users to go on the website, they will see what we defined. It will handle all type of requests like <code>GET</code> or <code>POST</code>.</li> <li>Return View name</li> <li><code>return \"main-menu\"</code>. Based on the config file, it will look under the given <code>prefix</code> directory and will then append the <code>suffix</code>.</li> <li>Create the View page</li> <li>Just any regular HTML page</li> </ol> <pre><code>@Controller\npublic class HomeController {\n\n@RequestMapping(\"/\")\npublic String showPage() {\nreturn \"main-menu\";\n}\n}\n</code></pre>"},{"location":"mvc.html#read-form-data-with-spring-mvc","title":"Read Form-Data with Spring MVC","text":"<p>The key here is to have one <code>HelloWorldController</code> with two different <code>RequestMapping</code>.</p> <pre><code>@Controller\npublic class HelloWorldController {\n@RequestMapping(\"/showForm\")\npublic String showForm() {\nreturn \"helloworld-form\";\n}\n\n@RequestMapping(\"/processForm\")\npublic String processForm() {\nreturn \"helloworld\";\n}\n}\n</code></pre> <p>Step by step: 1. Create controller class 2. Show HTML form   3. Create controller method to show HTML form   4. Create View page for HTML form 5. Process HTML form   6. Create controller   7. Develop view page</p>"},{"location":"mvc.html#adding-data-to-the-spring-model","title":"Adding data to the Spring model","text":"<ul> <li>Model is a container for our application data</li> <li>Strings, objects, info from database, ...</li> <li> <p>View page (JSP) can access data from the model</p> </li> <li> <p>Pass model to controller. In this example: Lets make name uppercase from input-field.</p> </li> </ul> <pre><code>@RequestMapping(\"/processFormVersionTwo\")\npublic String letsShoutDude(HttpServletRequest request, Model model) {\nString theName = request.getParameter(\"studentName\");\ntheName = theName.toUpperCase();\nString result = \"Yo! \" + theName;\nmodel.addAttribute(\"message\", result);\nreturn \"helloworld\";\n}\n</code></pre> <ol> <li>Access data from model in view page <pre><code>&lt;html&gt;&lt;body&gt;\nHello World!\n...\nThe message: ${message}\n&lt;/body&gt;&lt;/html&gt;\n</code></pre></li> </ol>"},{"location":"mvc.html#bonus","title":"Bonus","text":"<p>Bonus: Deploying your App to Tomcat as a Web Application Archive (WAR) file</p> <p>When you deploy your Java web apps, you can make use of a Web Application Archive (WAR) file.</p> <p>The Web Application Archive (WAR) file is a compressed version of your web application. It uses the zip file format but the file has the .war extension.</p> <p>If you are using Eclipse, then the best way to visualize it is think of your \"WebContent\" directory being compressed as a zip file with the .war extension.</p> <p>This includes all of your web pages, images, css etc. It also includes the WEB-INF directory which includes your classes in WEB-INF/classes and supporting JAR files in WEB-INF/lib.</p> <p>The WAR file format is part of the Java EE / Servlet specification. As a result, all Java EE servers support this format (ie jboss, weblogic, websphere, glassfish and tomcat).</p> <p>Below, I provide steps on how to create a WAR file in Eclipse. I also show how to deploy the WAR file on Tomcat.</p>"},{"location":"mvc.html#reading-html-form-data-with-requestparam","title":"Reading HTML Form data with <code>@RequestParam</code>","text":"<ul> <li>... Instead of using <code>HttpServletRequest</code></li> <li>Spring will read param from request: <code>studentName</code></li> <li>Bind it to the variable: <code>theName</code></li> </ul> <pre><code>    @RequestMapping(\"/processFormVersionThree\")\npublic String processFormVersionThree(@RequestParam(\"studentName\") String theName, Model model) {\ntheName = theName.toUpperCase();\nString result = \"Yo!! \" + theName;\nmodel.addAttribute(\"message\", result);\nreturn \"helloworld\";\n}\n</code></pre>"},{"location":"mvc.html#add-controller-requestmapping","title":"Add Controller <code>@RequestMapping</code>","text":"<ul> <li>You can define a request mapping at the controller-level</li> <li>All request mappings on methods in the controller are relative: Similar to folder directory structure</li> <li>So it would be: <code>/funny/showForm</code>. Where <code>/funny</code> is controller mapping and <code>/showForm</code> method mapping.</li> <li>Great technique to group requests</li> </ul> <pre><code>@RequestMapping(\"/funny\")\npublic class FunnyController {\n@RequestMapping(\"/showForm\")\npublic String showForm() {\n}\n\n@RequestMapping(\"/processForm\")\npublic String process(HttpServletRequest request, Model model) {\n}\n}\n</code></pre>"},{"location":"mvc.html#spring-mvc-form-tags","title":"Spring MVC Form Tags","text":"<ul> <li>Spring MVC Form Tags are the building block for a web page</li> <li>Can make use of data binding</li> <li>Automatically setting / retrieving data from Java objects / beans</li> <li>Will generate HTML for you + some special features</li> <li>Put in JSP page</li> <li>To reference Form Tags make use of: <code>&lt;%@ taglib prefix=\"form\" uri=\"...\"%&gt;</code> in JSP file</li> <li>Examples</li> <li>form:form</li> <li>form:input</li> <li>form:textarea</li> <li>form:checkbox</li> <li>...</li> </ul> <p><code>StudentController</code> * New Student Object is passed to the Form <pre><code>@RequestMapping(\"/showForm\")\npublic String showForm(Model theModel) {\ntheModel.addAttribute(\"student\", new Student());\nreturn \"student-form\";\n}\n</code></pre></p> <p><code>form.jsp</code> * When Form is loaded, Spring will call: <code>student.getFirstName()</code> (reference to <code>path=\"firstName\"</code>) * When Form is submited, Spring will call: <code>student.setFirstName()</code> <pre><code>&lt;form:form action=\"processForm\" modelAttribute=\"student\"&gt;\n    First name: &lt;form:input path=\"firstName\" /&gt;\n    &lt;br&gt;&lt;br&gt;\n    Last name: &lt;form:input path=\"lastName\" /&gt;\n    &lt;br&gt;&lt;br&gt;\n    &lt;input type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form:form&gt;\n</code></pre></p> <p>Read form in <code>StudentController</code>: * <code>@ModelAttribute</code> is bind to the above <code>modelAttribute=\"student\"</code>. Spring will take the model attribute and bind it to the variable <code>theStudent</code>. * No more <code>request.getParamter</code> needed. <pre><code>@RequestMapping(\"/processForm\")\npublic String processForm(@ModelAttribute(\"student\") Student theStudent) {\nSystem.out.println(\"theStudent: \" + theStudent.getLastName());\nreturn \"student-confirmation\";\n}\n</code></pre></p> <p><code>student-confirmation</code> <pre><code>&lt;html&gt;\n&lt;body&gt;\nThe student is confirmed: ${student.firstName} ${student.lastName}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p> <p></p>"},{"location":"mvc.html#dropdown-list","title":"Dropdown list","text":"<pre><code>&lt;form:select path=\"country\"&gt;\n    &lt;form:option value=\"Brazil\" label=\"Brazil\" /&gt;\n    &lt;form:option value=\"USA\" label=\"USA\" /&gt;\n&lt;/form:select&gt;\n</code></pre>"},{"location":"mvc.html#radio-buttons","title":"Radio Buttons","text":"<pre><code>Java &lt;form:radiobutton path=\"favoriteLanguage\" value=\"Java\" /&gt;\nPerl &lt;form:radiobutton path=\"favoriteLanguage\" value=\"Perl\" /&gt;\nPython &lt;form:radiobutton path=\"favoriteLanguage\" value=\"Python\" /&gt;\n</code></pre>"},{"location":"mvc.html#check-boxes","title":"Check Boxes","text":"<pre><code>Linux &lt;form:checkbox path=\"operatingSystems\" value=\"Linux\" /&gt;\nWindows &lt;form:checkbox path=\"operatingSystems\" value=\"Windows\" /&gt;\nMacOS &lt;form:checkbox path=\"operatingSystems\" value=\"MacOS\" /&gt;\n</code></pre>"},{"location":"mvc.html#spring-mvc-form-validation","title":"Spring MVC Form Validation","text":"<ul> <li>Validate the Fields in the Form (range, format, custom rule, ...)</li> <li>Java has standard bean validation API</li> <li>Spring version 4 and higher supports Bean Validation API (preferred)</li> <li>Examples</li> <li><code>@NotNull</code></li> <li><code>@Min</code>, <code>@Max</code></li> <li><code>@Size</code></li> <li><code>@Pattern</code> for regex</li> <li> <p>...</p> </li> <li> <p>Setting up Environment</p> </li> <li>We need an implementation of Java's standard Bean Validation API (JSR-303)</li> <li>Here comes Hibernate into play</li> <li>Has a separate project just for doing validation (Hibernate validator)</li> <li>Jakarte EE</li> <li>Community implementation of Java EE, so not maintained by Oracle</li> <li>Important: <code>javax.*</code> packages are renamed to <code>jakarta.*</code></li> <li>Hibernate Validator 7 is based on Jakarta EE 9</li> <li>Spring 5 is still bases on Java EE (javax.*)</li> <li> <p>Spring 5 is not compatible with Hibernate Validator 7 (use Hibernator 6.2)</p> </li> <li> <p>If using Spring 5, use Hibernate Validator 6.2</p> </li> <li>If using Spring Jakarta EE 9, use Hibernator Validator 7</li> </ul>"},{"location":"mvc.html#required-fields","title":"Required Fields","text":"<ul> <li> <p>E.g. last name is required</p> </li> <li> <p>Add validation rule to Customer class</p> </li> <li>Display error Message on HTML form</li> <li>Perform validation in Controller class</li> <li>Update confirmation page</li> </ul> <p>Add validation rule to Customer class</p> <pre><code>public class Customer {\nprivate String firstName;\n\n@NotNull(message=\"is required\")\n@Size(min=1, message=\"is required\") // minimum of 1 char\nprivate String lastName;\n}\n</code></pre> <p>Display error Message on HTML form <pre><code>&lt;form:form action=\"processForm\" modelAttribute=\"customer\"&gt;\n    First name: &lt;form:input path=\"firstname\" /&gt;\n\n    Last name (*): &lt;form:input path=\"lastName\" /&gt;\n    &lt;form:errors path=\"lastName\" cssClass=\"error\" /&gt;\n    ...\n&lt;/form:form&gt;\n</code></pre></p> <p>Perform validation in Controller class * <code>@Valid</code>: Perform validation rules on <code>Customer</code> object * <code>BindingResult</code>: Result of that validation will be placed in here <pre><code>@RequestMapping(\"/processForm\")\npublic String processForm(@Valid @ModelAttribute(\"customer\") Customer theCustomer, BindingResult theBindingResult) {\nif (theBindingResult.hasErrors()) {\nreturn \"customer-form\";\nelse {\nreturn \"customer-confirmation\";\n}    }\n}\n</code></pre></p> <p>Update confirmation page <pre><code>&lt;html&gt;\n&lt;body&gt;\nconfirmed: ${customer.firstName} ...\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></p>"},{"location":"mvc.html#spring-mvc-validation-for-numbers","title":"Spring MVC Validation for Numbers","text":"<p>Steps are the same as above <pre><code>public class Customer {\n@Min(value=0, message=\"must be greater than 0\")\n@Max(value=10, message=\"must be less than 10\")\nprivate int freePasses;\n...\n}\n</code></pre></p> <p>No modifications needed in <code>CustomerController</code></p>"},{"location":"mvc.html#spring-mvc-validation-with-regular-expressions","title":"Spring MVC Validation with Regular Expressions","text":"<ul> <li>e.g. to validate postal code. We apply a pattern.</li> </ul> <p>Steps are the same as above <pre><code>public class Customer {\n@Pattern(regexp=\"^[a-zA-Z0-9]{5}\", message=\"only 5 chars/digits\")\nprivate String postalCode;\n...\n}\n</code></pre></p>"},{"location":"mvc.html#make-an-integer-field-required","title":"Make an Integer Field \"required\"","text":"<ul> <li>Cant use <code>@NotNull()</code> with <code>int</code>. Instead use Wrapper class <code>Integer</code></li> </ul> <pre><code>@NotNull(message = \"is required\")\nprivate Integer freePasses;\n</code></pre> <ul> <li>Also update getter/setter <pre><code>public Integer getFreePasses() {\nreturn freePasses;\n}\n\npublic void setFreePasses(Integer freePasses) {\nthis.freePasses = freePasses;\n}\n</code></pre></li> </ul>"},{"location":"mvc.html#handle-string-input-for-integer-fields","title":"Handle String-input for Integer fields","text":"<p>So we only can give digits as input</p> <ol> <li>Create a custom error message</li> <li><code>src/resources/messages.properties</code></li> <li>Load custom messages resource in Spring config file</li> <li><code>WebContent/WEB-INF/spring-mvc-demo-servlet.xml</code></li> </ol> <p>Create a custom error message </p> <p>Load custom messages resource in Spring config file <pre><code>&lt;bean id=\"messageSource\" class=\"org.springframework.context.support.ResourceBundleMessageSource\"&gt;\n&lt;property name=\"basenames\" value=\"resources/messages\"/&gt;\n&lt;/bean&gt;\n</code></pre></p>"},{"location":"mvc.html#spring-mvc-custom-validation","title":"Spring MVC Custom Validation","text":"<ul> <li>Custom Business rules, e.g. Course Code must start with \"LUV\"</li> <li>Own Custom Annotation, e.g. <code>@CourseCode</code></li> </ul> <pre><code>@CourseCode(value=\"LUV\", message=\"must start with LUV\")\nprivate String courseCode;\n</code></pre> <ol> <li>Create custom validation rule:</li> <li>Create <code>@CourseCode</code> Annotation</li> <li> <p>Create <code>CourseCodeConstraintValidator</code> (our own custom logic)</p> </li> <li> <p><code>@interface</code> special type of interface to create a custom annotation in Java</p> </li> <li><code>@Constraint</code> constraint that is validated by a class with given business rules / logic</li> <li><code>@Target</code> where can we apply this annotation? Here we can use it to a method or field</li> <li><code>@Retention</code> how long should we retain the annotation? Here, runtime so we can inspect it at runtime</li> </ol> <p><code>src/com.dstoecklein.springdemo.mvc.validation</code></p> <p><code>CourseCode.java</code></p> <pre><code>@Constraint(validatedBy = CourseCodeConstraintValidator.class)\n@Target( { ElementType.METHOD, ElementType.FIELD } )\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CourseCode {\n// define default course code\npublic String value() default \"LUV\";\n\n// define default error message\npublic String message() default \"must start with LUV\";\n}\n</code></pre> <ol> <li>Create <code>CourseCodeConstraintValidator</code></li> </ol> <p><code>src/com.dstoecklein.springdemo.mvc.validation</code></p> <p><code>CourseCodeConstraintValidator.java</code></p> <pre><code>public class CourseCodeConstraintValidator implements ConstraintValidator&lt;CourseCode, String&gt; {\nprivate String coursePrefix;\n\n@Override\npublic void initialize(CourseCode theCourseCode) {\ncoursePrefix = theCourseCode.value(); // gives me value from @CourseCode(value=\"LUV\", message=\"\")\n}\n\n// Spring MVC will call this at runtime\n// ConstraintValidatorContext is a helper class to add messages later\n@Override\npublic boolean isValid(String theCode, ConstraintValidatorContext theConstraintValidatorContext) {\nboolean result;\n\nif (theCode != null) {\n// does it start with \"LUV\"?\nresult = theCode.startsWith(coursePrefix);\n}\nelse {\n// if course code is empty, return true\nresult = true;\n}\n\nreturn result;\n}\n}\n</code></pre>"},{"location":"rest.html","title":"REST","text":""},{"location":"rest.html#business-problem","title":"Business Problem","text":"<ul> <li>We try to build a client app that provides weather report for a city, so we need to get weather data from an external service.</li> </ul>"},{"location":"rest.html#questions","title":"Questions","text":"<ul> <li>How will we connect to the weather service? </li> <li>We make REST API calls over HTTP</li> <li>What Programming language we use?</li> <li>REST is language independent</li> <li>What is the data format?</li> <li>REST can use any data format (JSON most popular)</li> </ul>"},{"location":"rest.html#possible-solution","title":"Possible Solution","text":"<ul> <li>Use API of openweathermap.org</li> </ul> <p>Request</p> <pre><code>api.openweathermap.org/data/2.5/weather?q={city}\n</code></pre> <p>Response</p> <pre><code>{\n\"temp\": 14,\n\"temp_min\": 9,\n...\n}\n</code></pre>"},{"location":"rest.html#remember","title":"Remember","text":"<ul> <li>All we need to care about is that the programming language we are using can process the data format we are getting back.</li> </ul>"},{"location":"rest.html#dont-get-confused","title":"Dont get confused...","text":"<ul> <li>REST API, RESTful API, REST Web Services, ... are all the same</li> </ul>"},{"location":"rest.html#json","title":"JSON","text":"<ul> <li>Curley braces define objects</li> <li>Object members are name / value pairs</li> <li>Name is always in \"\"</li> </ul> <pre><code>{\n\"temp\": 14,\n\"temp_min\": 9,\n\"address\": {\n\"street\": \"Lerchenstra\u00dfe\",\n...\n},\n...\n}\n</code></pre>"},{"location":"rest.html#java-json-data-binding","title":"Java JSON Data Binding","text":"<ul> <li>Data binding is the process of converting JSON to Java POJO (Plain old Java Class)and vice versa.</li> <li>Also known as mapping / serialization, marshalling... its all the same</li> <li>Spring uses the Jackson Project behind the scenes</li> <li>Jackson handles data binding between JSON and Java POJO</li> <li>https://github.com/FasterXML/jackson-databind</li> <li>In conversion, Jackson will call appropriate getter / setters. It does NOT access private fields directly!</li> </ul> <pre><code>import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class Driver {\npublic statis void main(String[] args) throws Exception {\nObjectMapper mapper = new ObjectMapper();\n\n// Read data from json file, create an instance of this class and populate it\nStudent myStudent = mapper.readValue(new File(\"data/sample.json\"), Student.class);\n}\n}\n</code></pre> <p>Vice versa:</p> <pre><code>import com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class Driver {\npublic statis void main(String[] args) throws Exception {\nObjectMapper mapper = new ObjectMapper();\n\n// Read data from json file, create an instance of this class and populate it\nStudent myStudent = mapper.readValue(new File(\"data/sample.json\"), Student.class);\n\nmapper.enable(SerializationFeature.INDENT_PUTPUT); // just prettier writing\nmapper.writeValue(new File(\"data/output.json\"), myStudent);\n}\n}\n</code></pre>"},{"location":"rest.html#spring-jackson","title":"Spring &amp; Jackson","text":"<ul> <li>When building Spring REST apps, Spring will automatically handle Jackson integration</li> <li>JSON data being passed to REST controller is converted to POJO</li> <li>Java object being returned from REST controller is converted to JSON</li> </ul>"},{"location":"rest.html#ignore-json-properties-that-we-dont-want-to-use","title":"Ignore JSON properties that we don't want to use","text":"<pre><code>@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Student {\n...\n}\n</code></pre>"},{"location":"rest.html#http","title":"HTTP","text":"<ul> <li>Most common use of REST is over HTTP</li> <li>CRUD operations</li> <li>POST (Create new entity)</li> <li>GET (Read a list of entities)</li> <li>PUT (Update entity)</li> <li>DELETE (Delete entity)</li> </ul>"},{"location":"rest.html#whats-in-the-messages","title":"What's in the messages?","text":"<ul> <li>Request Message</li> <li>Request line: HTTP command</li> <li>Header variable: Request metadata</li> <li>Message body: contents of message as JSON</li> <li>Response Message</li> <li>Response line: Server protocol and status code (404, 500, etc)</li> <li>Header variable: Response metadata (if its XML or JSON, ...)</li> <li>Message body: contents of message</li> <li>MIME Content Types</li> <li>Message format is described by MIME content type (Multipurpose Internet Mail-Extension)</li> <li>Basic syntax: <code>type/sub-type</code></li> <li>Examples: <code>text/html</code> or <code>text/plain</code>. Browser will render based on HTML tags or will just render plain text.</li> <li>Client-Tool</li> <li>Curl</li> <li>Postman</li> <li>...</li> </ul>"},{"location":"rest.html#spring-rest-controller","title":"Spring REST Controller","text":"<ul> <li><code>@RestController</code> its an extension of <code>Controller</code></li> <li>Handles REST requests and response</li> <li>Will automatically convert Java POJOs to JSON</li> <li>as long as Jackson project is on the classpath or pom.xml</li> </ul> <pre><code>@RestController\n@RequestMapping(\"/test\")\npublic class DemoRestController {\n\n@GetMapping(\"/hello\")\npublic String sayHello() {\nreturn \"Hello World\";\n}\n}\n</code></pre> <ul> <li>Access REST endpoint at <code>/test/hello</code></li> </ul>"},{"location":"rest.html#development-process","title":"Development Process","text":"<ul> <li>Add Maven / Gradle dependency for Spring MVC and Jackson</li> <li>Add code for Java Config: <code>@Configuration</code></li> <li>Add code for Java Config: Servlet Initializer</li> <li>Create Spring REST Service using <code>@RestController</code></li> </ul> <p>Add Maven / Gradle dependency for Spring MVC and Jackson</p> <p>...</p> <p>Add code for Java Config: <code>@Configuration</code></p> <pre><code>@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages=\"com.dstoecklein.springdemo\")\npublic class DemoAppConfig {\n...\n}\n</code></pre> <p>Add code for Java Config: Servlet Initializer</p> <pre><code>public class MySpringMvcDispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletinitializer {\n\n@Override\nprotected Class&lt;?&gt;[] getRootConfigClasses() {\nreturn null;\n}\n\n@Override\nprotected Class&lt;?&gt;[] getServletConfigClasses() {\nreturn new Class[] { DemoAppConfig.class };\n}\n\n@Override\nprotected String[] getServletMappings() {\nreturn new String[] { \"/\" };\n}\n}\n</code></pre> <p>Create Spring REST Service using <code>@RestController</code></p> <pre><code>@RestController\n@RequestMapping(\"/test\")\npublic class DemoRestController {\n\n@GetMapping(\"/hello\")\npublic String sayHello() {\nreturn \"Hello World\";\n}\n}\n</code></pre>"},{"location":"rest.html#creating-a-rest-service","title":"Creating a REST Service","text":"<ul> <li>We are going to create a Service for Students</li> <li>We will make GET Requests via Postman on this Service</li> </ul> <ul> <li>Will return <code>List&lt;Student&gt;</code>, need to convert to JSON with Jackson</li> <li>If Jackson is a dependency via Maven or Gradle, then</li> <li>JSON data passed to a <code>@RestController</code> is automatically converted to POJO</li> <li>POJO passed to a <code>@RestController</code> is automatically converted to JSON</li> </ul>"},{"location":"rest.html#development-process_1","title":"Development Process","text":"<ul> <li>Create Java POJO Class for Students (we have done this earlier)</li> <li>Create <code>@RestController</code></li> </ul> <pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class StudentRestController {\n\n@GetMapping(\"/students\")\npublic List&lt;Student&gt; getStudents() {\nList&lt;Student&gt; theStudents = new ArrayList&lt;&gt;();\n\n// hardcoded for now\nthestudents.add(new Student(\"Max\", \"M\u00fcller\"));\nthestudents.add(new Student(\"Bob\", \"Allh\"));\n\nreturn theStudents;\n}\n}\n</code></pre>"},{"location":"rest.html#path-variables","title":"Path Variables","text":"<ul> <li>Retrieve a single Student by id <code>/api/students/{studentId}</code>, that <code>studentId</code> is called PathVariable</li> </ul>"},{"location":"rest.html#development-process_2","title":"Development Process","text":"<ul> <li>Add request mapping to our Service</li> <li>Bind path variable using <code>@PathVariable</code></li> </ul> <pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class StudentRestController {\n\n@GetMapping(\"/students/{studentId}\")\npublic Student getStudent(@PathVariable int studentId) {\nList&lt;Student&gt; theStudents = new ArrayList&lt;&gt;();\n//populate theStudents\n}\nreturn theStudents.get(studentId);\n}\n</code></pre>"},{"location":"rest.html#exception-handling","title":"Exception Handling","text":"<ul> <li>If we passed over a bad studentId, we received a <code>Status 500</code> error</li> <li>We dont want that, because it exposes a lot of sensitive data</li> <li>We want to return error as JSON instead</li> </ul> <pre><code>{\n\"status\": 404,\n\"message\": \"Student id not found\",\n\"timeStamp\": 15261454867\n}\n</code></pre>"},{"location":"rest.html#development-process_3","title":"Development process","text":"<ul> <li>Create custom error response class</li> <li>Create custom exception class</li> <li>Update REST service to throw exception</li> <li>Add an exception handler method using <code>@ExceptionHandler</code></li> </ul> <p>Create custom error response class (we will define it as POJO) <pre><code>public class StudentErrorResponse {\nprivate int status;\nprivate String message;\nprivate long timeStamp;\n\n// constructor + getter/setter\n}\n</code></pre></p> <p>Create custom exception class (will be used by our REST service) <pre><code>public class StudentNotFoundException extends RuntimeException {\npublic StudentNotFoundException(String message) {\nsuper(message);\n}\n}\n</code></pre></p> <p>Update REST service to throw exception <pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class StudentRestController {\n\n...\n\nif ( (studentId &gt;= theStudents.size() ) || (studentId &lt; 0) ) {\nthrow new StudentNotFoundException(\"Student id not found - \" + studentId);\n}\n\n// Happy Path\nreturn theStudents.get(studentId); }\n</code></pre></p> <p>Add an exception handler method using <code>@ExceptionHandler</code> (Will response a <code>ResponseEntity</code> which is a wrapper for the HTTP response object)</p> <pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class StudentRestController {\n\n...\n\n@ExceptionHandler\npublic ResponseEntity&lt;StudentErrorResponse&gt; handleException(StudentNotFoundException exc) {\nStudentErrorResponse error = new StudentErrorResponse();\n\nerror.setStatus(HttpStatus.NOT_FOUND.value());\nerror.setMessage(exc.getMessage());\nerror.setTimeStamp(System.currentTimeMillis());\n\nreturn new ResponseEntity&lt;&gt;(error, HttpStatus.NOT_FOUND);\n}\n}\n</code></pre>"},{"location":"rest.html#edge-cases","title":"Edge cases","text":"<ul> <li>What happens if we enter a String: <code>/api/students/fdsjflsd</code></li> <li>It will return <code>400 Bad Request</code></li> </ul> <pre><code>@RestController\n@RequestMapping(\"/api\")\npublic class StudentRestController {\n\n...\n\n// add another handler to catch all\n@ExceptionHandler\npublic ResponseEntity&lt;StudentErrorResponse&gt; handleException(Exception exc) {\nStudentErrorResponse error = new StudentErrorResponse();\n\nerror.setStatus(HttpStatus.BAD_REQUEST.value());\nerror.setMessage(exc.getMessage());\nerror.setTimeStamp(System.currentTimeMillis());\n\nreturn new ResponseEntity&lt;&gt;(error, HttpStatus.BAD_REQUEST);\n}\n}\n</code></pre>"},{"location":"rest.html#global-exception-handling","title":"Global Exception Handling","text":"<ul> <li>Exception handler code is only for the specific REST controller</li> <li>Cant be reused by other controllers, like in large projects</li> <li>We can make use of <code>@ControllerAdvice</code></li> <li>Pre-process requests to controller</li> <li>Post-process responses to handle exception</li> <li>Real-time use of AOP</li> </ul>"},{"location":"rest.html#development-process_4","title":"Development process","text":"<ul> <li>Create new <code>@ControllerAdvice</code></li> <li>Refactor our REST service to remove exception handling code</li> <li>Add exception handling code to <code>@ControllerAdvice</code></li> </ul> <p>Create new <code>@ControllerAdvice</code> <pre><code>@ControllerAdvice\npublic class StudentRestExceptionHandler {\n...\n}\n</code></pre></p> <p>Refactor our REST service to remove exception handling code</p> <p>...</p> <p>Add exception handling code to <code>@ControllerAdvice</code> <pre><code>@ControllerAdvice\npublic class StudentRestExceptionHandler {\n\n@ExceptionHandler\npublic ResponseEntity&lt;StudentErrorResponse&gt; handleException(StudentNotFoundException exc) {\nStudentErrorResponse error = new StudentErrorResponse();\n\nerror.setStatus(HttpStatus.NOT_FOUND.value());\nerror.setMessage(exc.getMessage());\nerror.setTimeStamp(System.currentTimeMillis());\n\nreturn new ResponseEntity&lt;&gt;(error, HttpStatus.NOT_FOUND);\n}\n}\n</code></pre></p>"},{"location":"rest.html#rest-api-design","title":"REST API Design","text":"<ul> <li>Who and how will they use our API -&gt; Design based on this</li> <li>E.g. for a CRM system</li> <li>Full CRUD support for our Customers</li> <li>Most prominent \"noun\" is \"customer\"</li> <li>Endpoint convention: <code>customer</code></li> </ul>"},{"location":"rest.html#anti-patterns","title":"Anti-Patterns","text":"<ul> <li>Don't include actions in the endpoint</li> <li>Instead, use HTTP methods to assign actions</li> <li>Above, our endpoints don't have any actions in the names</li> </ul>"},{"location":"rest.html#examples","title":"Examples","text":""},{"location":"rest.html#crud-project","title":"CRUD Project","text":""},{"location":"rest.html#development-process_5","title":"Development Process","text":"<ul> <li>Get customers</li> <li>Get single customer by ID</li> <li>Add a new customer</li> <li>Update customer</li> <li>Delete customer</li> </ul>"},{"location":"security.html","title":"Spring Security","text":""},{"location":"spring_boot.html","title":"1. Kotlin and Spring Boot","text":"<p>Run and visit <code>http://localhost:8080</code></p> <pre><code>@RestController\n@SpringBootApplication\nopen class Main {\n@RequestMapping(\"/\")\nfun home() = \"Hello World!\"\n}\n\nfun main(args: Array&lt;String&gt;) {\nrunApplication&lt;Main&gt;(*args)\n}\n</code></pre> <p><code>@RestController</code> is a stereotype annotation, which provides hints for people reading the code and for Spring that the class play a specific role. In this case, the class is a web <code>@Controller</code>, so Spring considers it when handling incoming web requests.</p> <p><code>@RequestMapping</code> annotation provides routing information. It tells Spring that any HTTP request should be mapped to the <code>home</code> method.</p> <p>The <code>@RestController</code> and <code>@RequestMapping</code> annotations are Spring MVC annotations (they are not specific to Spring Boot)</p> <p>The <code>@SpringBootApplication</code> is a meta-annotation, it combines <code>@SpringBootConfiguration</code>, <code>@EnableAutoConfiguration</code> and <code>@ComponentScan</code>. <code>@EnableAutoConfiguration</code> tells Spring Boot to guess how you want to configure Spring, based on the jar dependencies that you have added.</p> <p>In the <code>main</code> method we need to pass <code>Main</code>.class as an argument to the run method to tell SpringApplication which is the primary Spring component. </p>"},{"location":"spring_boot.html#2-gradle-kotlin-dls","title":"2. Gradle (Kotlin DLS)","text":""}]}